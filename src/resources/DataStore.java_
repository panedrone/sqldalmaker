package com.sqldalmaker;

import java.util.List;

/**
 * Class DataStore defines Data Access Controller used in Java code generated by SQL DAL Maker.
 *
 * SQL DAL Maker Website: http://sqldalmaker.sourceforge.net
 * Contact: sqldalmaker@gmail.com
 */
public abstract class DataStore {

    public static class OutParam<T> {

        private final int sqlType;
        private final Class<T> javaType;
        private T value = null;

        public OutParam(int sqlType, Class<T> javaType) {
            this.sqlType = sqlType;
            this.javaType = javaType;
        }

        public OutParam(int sqlType, Class<T> javaType, T value) {
            this.sqlType = sqlType;
            this.javaType = javaType;
            this.value = value;
        }

        public int getSqlType() {
            return this.sqlType;
        }

        public Class<T> getJavaType() {
            return this.javaType;
        }

        public T getValue() {
            return this.value;
        }

        public void setValue(T value) {
            this.value = value;
        }
    }

    /*  Example of usage:

         for (Test t : dao.sp_get_rs_test(2, new DataStore.CursorOutParam(OracleTypes.CURSOR))) {
                // process...
         }
     */
    public static class CursorOutParam {
        private final int sqlType;
        public CursorOutParam(int sqlType) {
            this.sqlType = sqlType;
        }
        public int getSqlType() {
            return this.sqlType;
        }
    }

    public abstract <T> T castGeneratedValue(Class<T> type, Object obj);

    public abstract int insert(String sql, String[] genColNames,
                               Object[] genValues, Object... params) throws Exception;

    public abstract int execDML(String sql, Object... params) throws Exception;

    public abstract <T> T query(Class<T> type, String sql, Object... params) throws Exception;

    public abstract <T> List<T> queryList(Class<T> type, String sql, Object... params) throws Exception;

    public interface RowData {

        public abstract <T> T getValue(Class<T> type, String columnLabel) throws Exception;
    }

    public interface RowHandler<T> {

        abstract T handleRow(RowData rd) throws Exception;
    }

    public abstract <T> T queryDto(String sql, RowHandler<T> rowHandler,
                                   Object... params) throws Exception;

    public abstract <T> List<T> queryDtoList(String sql, RowHandler<T> rowHandler,
                                             Object... params) throws Exception;
}