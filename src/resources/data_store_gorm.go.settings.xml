<?xml version="1.0" encoding="UTF-8"?>
<settings xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="settings.xsd">

    <!--    (*) below means "a path relative to the project root"   -->

    <!-- target: the same as "module" in "go.mod" -->

    <!-- sql: base folder of SQL files (*) -->

    <folders target="sdm_demo_todolist" sql="sqlx/sdm/sql"/>

    <!-- scope: base folder of generated DTO files (*) -->

    <!-- field-names-mode: 0 - TitleCase -->

    <!-- macro: VM template to render DAO classes

            1. Internal VM template is used if "macro" is empty (default).
            2. VM template is located in "<macros>...<macro><vm>|<vm-xml>..." section below.
            3. Ending ".vm" means using of VM file and specifies the path to this file relative to the project root:
                    <dto ... macro="<path>/<name>.vm"/> -->

    <dto scope="gorm/dbal/dto" inheritance="" field-names-mode="0" macro=""/>

    <!-- scope: base folder of generated DAO files (*) -->

    <!-- field-assign-mode (Go only)":

            0 - by column name
            1 - by field position
            2 - ptr to DTO or ptr to slice of DTO-s (Gorm, sqlx)
            3 - ptr to resulting slice of DTO-s (Gorm, sqlx) -->

    <!-- macro: VM template to render DAO classes

            1. Internal VM template is used if "macro" is empty (default).
            2. VM template is located in "<macros>...<macro><vm>|<vm-xml>..." section below.
            3. Ending ".vm" means using of VM file and specifies the path to this file relative to the project root:
                    <dao ... macro="<path>/<name>.vm"/> -->

    <dao scope="gorm/dbal" field-assign-mode="3" macro=""/>

    <ide event-log="true"/>

    <jdbc jar="lib/sqlite-jdbc-3.42.0.0.jar" class="org.sqlite.JDBC"
          url="jdbc:sqlite:$PROJECT_DIR$/todolist.sqlite" user="" pwd=""/>

    <!--    <jdbc jar="ojdbc10.jar" class="oracle.jdbc.driver.OracleDriver"-->
    <!--          url="jdbc:oracle:thin:@localhost:1521/XE" user="todolist" pwd="sa"/>-->

    <!--    <jdbc jar="mysql-connector-java-8.0.13.jar" class="com.mysql.cj.jdbc.Driver"-->
    <!--          url="jdbc:mysql://localhost/todolist" user="root" pwd="sa"/>-->

    <!--    <jdbc jar="postgresql-42.3.4.jar" class="org.postgresql.Driver"-->
    <!--          url="jdbc:postgresql://localhost:5432/todolist" user="postgres" pwd="sa" />-->

    <type-map default="">

        <!-- sqlite3 -->

        <!--        <type detected="gorm-java.lang.Integer" target="int64${json-gorm} -> SetInt64"/>-->
        <!--        <type detected="gorm-java.lang.Float" target="float32${json-gorm} -> SetFloat32"/>-->
        <!--        <type detected="gorm-java.lang.Double" target="float64${json-gorm} -> SetFloat64"/>-->
        <!--        <type detected="gorm-java.lang.String" target="string${json-gorm} -> SetString"/>-->
        <!--        <type detected="gorm-java.util.Date" target="time:time.Time${json-gorm} -> SetTime"/>-->
        <!--        <type detected="gorm-byte[]" target="[]byte${json-gorm} -> SetBytes"/>-->
        <!--        <type detected="gorm-java.lang.Object" target="interface{}${json-gorm}"/>-->

        <!--        <type detected="java.lang.Integer" target="int64${json} -> SetInt64"/>-->
        <!--        <type detected="java.lang.Float" target="float32${json} -> SetFloat32"/>-->
        <!--        <type detected="java.lang.Double" target="float64${json} -> SetFloat64"/>-->
        <!--        <type detected="java.lang.String" target="string${json} -> SetString"/>-->
        <!--        <type detected="java.util.Date" target="time:time.Time${json} -> SetTime"/>-->
        <!--        <type detected="byte[]" target="[]byte${json} -> SetBytes"/>-->
        <!--        <type detected="java.lang.Object" target="interface{}${json}"/>-->

        <!-- oracle -->

        <!--        package model-->

        <!--        import (-->
        <!--            "fmt"-->
        <!--            "github.com/godror/godror"-->
        <!--            "gorm.io/gorm"-->
        <!--            "gorm.io/gorm/schema"-->
        <!--        )-->

        <!--        type OraIdentity godror.Number-->

        <!--        func (OraIdentity) GormDBDataType(db *gorm.DB, field *schema.Field) string {-->
        <!--            return "INTEGER GENERATED BY DEFAULT AS IDENTITY"-->
        <!--        }-->

        <!--        type OraNumber godror.Number-->

        <!--        // latest gorm release 1.25.10-->
        <!--        // https://gorm.io/docs/data_types.html-->

        <!--        // === panedrone: BUT it is also OK-->

        <!--        func (OraNumber) GormDBDataType(db *gorm.DB, field *schema.Field) string {-->
        <!--            //if len(field.DataType) > 0 { // "string" default if not provided in gorm:"type:...-->
        <!--            //	return string(field.DataType)-->
        <!--            //}-->
        <!--            p := field.Precision-->
        <!--            s := field.Scale-->
        <!--            if p <= 0 {-->
        <!--                p = 38-->
        <!--            }-->
        <!--            return fmt.Sprintf("NUMBER(%d,%d)", p, s)-->
        <!--        }-->

        <!--        <type detected="gorm-java.lang.Double" target="float64${json-gorm} -> SetFloat64"/>-->
        <!--        <type detected="gorm-java.math.BigDecimal" target="OraNumber${json-gorm-number} -> SetNumber"/>-->
        <!--        <type detected="gorm-java.math.BigDecimal+auto" target="OraIdentity${json-gorm-number} -> SetNumber"/>-->

        <!--        <type detected="gorm-java.lang.String" target="string${json-gorm} -> SetString"/>-->

        <!--        <type detected="gorm-java.util.Date" target="time:time.Time${json-gorm} -> SetTime"/>-->
        <!--        <type detected="gorm-java.time.ZonedDateTime" target="time:time.Time${json-gorm} -> SetTime"/>-->
        <!--        <type detected="gorm-java.time.LocalDateTime" target="time:time.Time${json-gorm} -> SetTime"/>-->

        <!--        <type detected="gorm-byte[]" target="string${json-gorm}"/>-->
        <!--        <type detected="gorm-java.lang.Boolean" target="int64${json-gorm} -> SetBool"/>-->

        <!--        <type detected="gorm-java.lang.Object" target="interface{}${json-gorm}"/>-->

        <!--        <type detected="java.lang.Double" target="float64$${json} -> SetFloat64"/>-->
        <!--        <type detected="java.math.BigDecimal" target="github.com/godror/godror:godror.Number${json} -> SetNumber"/>-->

        <!--        <type detected="java.lang.String" target="string${json} -> SetString"/>-->

        <!--        <type detected="java.util.Date" target="time:time.Time${json} -> SetTime"/>-->
        <!--        <type detected="java.time.ZonedDateTime" target="time:time.Time${json} -> SetTime"/>-->
        <!--        <type detected="java.time.LocalDateTime" target="time:time.Time${json-gorm} -> SetTime"/>-->

        <!--        <type detected="byte[]" target="string${json}"/>-->
        <!--        <type detected="java.lang.Boolean" target="int64${json} -> SetBool"/>-->

        <!--        <type detected="java.lang.Object" target="interface{}${json}"/>-->

        <!-- mysql, postgres, ms-sql -->

        <type detected="gorm-java.util.UUID" target="github.com/google/uuid:uuid.UUID${json-gorm}|1:;type:uuid"/>
        <!--        <type detected="gorm-java.util.UUID+auto"-->
        <!--              target="github.com/google/uuid:uuid.UUID${json-gorm}|1:;type:uuid;default:uuid_generate_v4()"/>-->
        <type detected="gorm-java.util.UUID+auto"
              target="github.com/google/uuid:uuid.UUID${json-gorm}|1:;type:uuid;default:gen_random_uuid()"/>

        <type detected="gorm-java.sql.Array" target="[]string${json-gorm}"/>

        <type detected="gorm-java.lang.Short" target="int16${json-gorm} -> SetInt16"/>
        <type detected="gorm-java.lang.Integer" target="int32${json-gorm} -> SetInt32"/>

        <type detected="gorm-java.lang.Long" target="int64${json-gorm} -> SetInt64"/>
        <type detected="gorm-java.lang.Long+auto" target="int64${json-gorm} -> SetInt64"/>

        <type detected="gorm-java.lang.Float" target="float32${json-gorm} -> SetFloat32"/>
        <type detected="gorm-java.lang.Double" target="float64${json-gorm} -> SetFloat64"/>
        <type detected="gorm-java.math.BigDecimal" target="float64${json-gorm} -> SetFloat64"/>

        <type detected="gorm-java.lang.String" target="string${json-gorm} -> SetString"/>
        <type detected="gorm-byte[]" target="string${json-gorm}"/>
        <type detected="gorm-java.lang.Boolean" target="bool${json-gorm} -> SetBool"/>

        <type detected="gorm-java.util.Date" target="time:time.Time${json-gorm} -> SetTime"/>
        <type detected="gorm-java.time.LocalDateTime" target="time:time.Time${json-gorm} -> SetTime"/>

        <type detected="gorm-java.lang.Object" target="interface{}${json-gorm}"/>

        <type detected="java.util.UUID" target="github.com/google/uuid:uuid.UUID${json} -> SetUUID"/>
        <type detected="java.sql.Array" target="[]string${json}"/>

        <type detected="java.lang.Short" target="int16${json} -> SetInt16"/>
        <type detected="java.lang.Integer" target="int32${json} -> SetInt32"/>
        <type detected="java.lang.Long" target="int64${json} -> SetInt64"/>


        <type detected="java.lang.Float" target="float32${json} -> SetFloat32"/>
        <type detected="java.lang.Double" target="float64${json} -> SetFloat64"/>
        <type detected="java.math.BigDecimal" target="float64${json} -> SetFloat64"/>

        <type detected="java.lang.String" target="string${json} -> SetString"/>
        <type detected="byte[]" target="[]byte${json} -> "/>
        <type detected="java.lang.Boolean" target="bool${json} -> SetBool"/>

        <type detected="java.util.Date" target="time:time.Time${json} -> SetTime"/>
        <type detected="java.time.LocalDateTime" target="time:time.Time${json} -> SetTime"/>

        <type detected="java.lang.Object" target="interface{}${json}"/>

        <type detected="java.sql.ResultSet" target="string"/> <!-- PG cursor param -->

    </type-map>


    <macros>

        <macro value="=built-in=" name="${column}"/>
        <macro value="=built-in=" name="${lower_snake_case(column)}"/>
        <macro value="=built-in=" name="${camelCase(column)}"/>
        <macro value="=built-in=" name="${TitleCase(column)}"/>
        <macro value="=built-in=" name="${kebab-case(column)}"/>

        <macro name="${col}" value="${lower_snake_case(column)}"/>

        <macro name="${json}" value=" `json:&quot;${col}${0}&quot;`"/>

        <macro name="${json-gorm}"
               value=" `json:&quot;${col}${0}&quot; gorm:&quot;column:${column}${gorm-params}${1}&quot;`"/>

        <macro name="${json-gorm-number}"
               value=" `json:&quot;${col}${0}&quot; gorm:&quot;column:${column}${gorm-number}${1}&quot;`"/>

        <macro name="${gorm-number}">
            <vm-xml>
                <if var="$fi.PK">
                    <print var=";primaryKey"/>
                    <if var="$fi.AI">
                        <print var=";autoIncrement"/>
                    </if>
                    <else>
                        <if var="$fi.Unique &amp;&amp;$fi.Indexed">
                            <print var=";uniqueIndex"/>
                            <else>
                                <if var="$fi.Unique">
                                    <print var=";unique"/>
                                </if>
                                <if var="$fi.Indexed">
                                    <print var=";index"/>
                                </if>
                            </else>
                        </if>
                    </else>
                </if>
                <if var="$fi.Precision > 0">
                    <print var=";precision:$fi.Precision"/>
                </if>
                <if var="$fi.Scale > 0">
                    <print var=";scale:$fi.Scale"/>
                </if>
                <if var="!$fi.Nullable">
                    <print var=";not null"/>
                </if>
            </vm-xml>
        </macro>

        <macro name="${gorm-params}">
            <vm-xml>
                <if var="$fi.ColumnSize > 0">
                    <print var=";size:$fi.ColumnSize"/>
                </if>
                <if var="$fi.PK">
                    <print var=";primaryKey"/>
                    <if var="$fi.AI">
                        <print var=";autoIncrement"/>
                    </if>
                    <else>
                        <if var="$fi.Unique &amp;&amp;$fi.Indexed">
                            <print var=";uniqueIndex"/>
                            <else>
                                <if var="$fi.Unique">
                                    <print var=";unique"/>
                                </if>
                                <if var="$fi.Indexed">
                                    <print var=";index"/>
                                </if>
                            </else>
                        </if>
                    </else>
                </if>
                <if var="!$fi.Nullable">
                    <print var=";not null"/> <!-- PK allows NULL in pg -->
                </if>
            </vm-xml>
        </macro>

    </macros>

</settings>