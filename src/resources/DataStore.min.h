#pragma once

enum ValueType
{
    VALUE_TYPE_LONG = 1,
    VALUE_TYPE_DOUBLE = 2,
    VALUE_TYPE_TEXT = 3,
    VALUE_TYPE_BLOB = 4
};

class CValue
{
public:

	bool IsNull;

	CValue(ValueType t)
	{
		type = t;
		IsNull = false;
	}

	ValueType getType()
	{
		return type;
	}

private:

	ValueType type;	 // C++ RTTI can be disabled
};

/* Example of derived class:

class CLong: public CValue
{
public:

	CLong() : CValue(VALUE_TYPE_LONG)
	{
		Value = 0;
	}

	int Value;
};

*/
/////////////////////////////////////////////////////

class CRowProcessor
{
public:

	virtual ~CRowProcessor() {}
	virtual void processRow() = 0;
};

/////////////////////////////////////////////////////

#define DL_STR const wchar_t *
#define DL_T(quote) L##quote

/////////////////////////////////////////////////////

class CDataStore
{
private:

	void * m_db; // The code specific for DB-engine is here

public:

	// TODO: add connection management, transaction management, error handling

	//////////////////////////////////////////
	//
	// The methods called from DAO classes generated by SQL DAL Maker:

	// if there are no AI_values (auto-increment), then call execDML instead
	// returns the number of inserted rows or -1 on error
	int insert(DL_STR sql, int params_count, CValue* params[], int AI_values_count, CValue* AI_values[]);

	// returns the number of updated rows or -1 on error
	int execDML(DL_STR sql, int params_count, CValue* params[]);

	// no params: params_count == 0 and params == 0
	// returns the number of fetched rows or -1 on error
	int queryRow(DL_STR sql, int params_count, CValue* params[], int ret_values_count, CValue* ret_values[], DL_STR col_names[]);

	// no params: params_count == 0 and params == 0
	// returns the number of fetched rows or -1 on error
	int queryRowList(DL_STR sql, int params_count, CValue* params[], int ret_values_count, CValue* ret_values[], DL_STR col_names[], CRowProcessor *rowProcessor);
};

/*

Usage of CListReader
--------------------

struct : CListReader<CCategory>
{
void read(CCategory &c)
{
_tprintf(_T("%ls\r\n"), c.CategoryName.m_value.GetBuffer());
}

} lr;

// getAllCategories is a method of generated DAO class

dao.getAllCategories(&lr);

*/

template <class T>
class CListReader
{
public:

	virtual ~CListReader() {}
	virtual void read(/*const*/ T &t) = 0;
};

/*

Usage of CListReader2
--------------------

CListReader2<CCategory> lr;

// getAllCategories is a method of generated DAO class

dao.getAllCategories(&lr);

_tprintf(_T("%d\r\n"), c.list.GetCount());


template <class T>
class CListReader2 : public CListReader<T>
{
public:

	CAtlList<T> list;

	void read(T &t)
	{
		list.AddHead(t);
	}
};

*/
