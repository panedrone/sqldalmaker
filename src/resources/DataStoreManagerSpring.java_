package com.sqldalmaker;

import org.springframework.jdbc.core.*;
import org.springframework.jdbc.support.JdbcUtils;

import javax.sql.DataSource;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/*
    SQL DAL Maker Website: http://sqldalmaker.sourceforge.net
    Contact: sqldalmaker@gmail.com

    This is an example of how to implement DataStore in Java using Spring JDBC.
    Copy-paste this code to your project and change it for your needs.
*/
public class DataStoreManager {

    private Connection connection;

    public void open() throws Exception {
//        connection = jdbcTemplate.getDataSource().getConnection();
        connection.setAutoCommit(false);
    }

    public void commit() throws Exception {
        connection.commit();
    }

    public void rollback() throws Exception {
        connection.rollback();
    }

    public void close() throws Exception {
        connection.setAutoCommit(true);
//        connection.close();
    }

    public void setDataSource(DataSource dataSource) throws SQLException {

        // keep connection open: this is H2 embedded
        connection = dataSource.getConnection();

        ds.setDataSource(dataSource);
    }

    private final MyDataStore ds = new MyDataStore();

    ////////////////////////////////////////////////////
    //
    // MyDataStore it is hidden, use 'Factory method pattern':

    // public TodoListDao createTodoListDao() {
    //     return new TodoListDao(ds);
    // }

    public class MyDataStore extends DataStore {

        // JdbcTemplate.update(final PreparedStatementCreator psc, final
        // KeyHolder generatedKeyHolder) does not work with H2:
        // after keys.getMetaData(), both ColumnName
        // and ColumnLabel are 'SCOPE_IDENTITY()'

        protected class JdbcTemplate2 extends JdbcTemplate {

            public JdbcTemplate2(DataSource dataSource) {
                super(dataSource);
            }

            public int insert(final String sql, final String[] genColNames,
                              final Object[] genValues, Object... params) throws Exception {

                final PreparedStatementSetter pss = newArgPreparedStatementSetter(params);

                PreparedStatementCreator psc = new PreparedStatementCreator() {
                    public PreparedStatement createPreparedStatement(Connection con) throws SQLException {
                        PreparedStatement ps = con.prepareStatement(sql, genColNames);
                        pss.setValues(ps);
                        return ps;
                    }
                };

                return execute(psc, new PreparedStatementCallback<Integer>() {

                    public Integer doInPreparedStatement(PreparedStatement ps)
                            throws SQLException {
                        int rows = ps.executeUpdate();
                        doAfterInsert(ps, genValues);
                        return rows;
                    }
                });
            }

            private void doAfterInsert(PreparedStatement stmt, Object[] genValues)
                    throws SQLException {

                ResultSet rs = stmt.getGeneratedKeys();

                if (rs != null) {

                    try {

                        int i = 0;

                        while (rs.next()) {

                            // UNCOMMENT THE LINE WHICH IS WORKING WITH YOUR JDBC DRIVER

                            // keys.getBigDecimal(1) works with most of tested
                            // drivers (except SQLite)

                            Object obj = rs.getBigDecimal(1);

                            // keys.getObject(1) works with all tested drivers,
                            // but it can return Long for Integer column (MySQL)

                            // Object obj = rs.getObject(1);

                            genValues[i] = obj;

                            i++;
                        }

                    } finally {

                        JdbcUtils.closeResultSet(rs);
                    }
                }
            }
        }

        private JdbcTemplate2 jdbcTemplate;

        public void setDataSource(DataSource dataSource) {

            this.jdbcTemplate = new JdbcTemplate2(dataSource);
        }

        @Override
        public <T> T castGeneratedValue(Class<T> type, Object obj) {

            // YOU CAN CHANGE/SIMPLIFY THIS METHOD IF IT IS POSSIBLE WITH YOUR JDBC DRIVER

            // For many drivers (SQL Server 2008, Derby), keys.getObject(1)
            // returns BigDecimal independently of type of column

            if (obj instanceof BigDecimal) {

                BigDecimal bigDecimal = (BigDecimal) obj;

                if (Byte.class.equals(type)) {

                    obj = bigDecimal.byteValueExact();

                } else if (Float.class.equals(type)) {
                    // there is no 'exact' version
                    obj = bigDecimal.floatValue();

                } else if (Double.class.equals(type)) {
                    // there is no 'exact' version
                    obj = bigDecimal.doubleValue();

                } else if (Integer.class.equals(type)) {

                    obj = bigDecimal.intValueExact();

                } else if (Long.class.equals(type)) {

                    obj = bigDecimal.longValueExact();

                } else if (BigInteger.class.equals(type)) {

                    obj = bigDecimal.toBigIntegerExact();

                } else if (BigDecimal.class.equals(type)) {

                    obj = bigDecimal;

                } else if (Object.class.equals(type)) {

                    obj = bigDecimal;

                } else {

                    throw new ClassCastException("Unexpected class '"
                            + type.getName() + "'");
                }
            }

            // cast:

            // Throws:
            // ClassCastException - if the object is not null and is not assignable
            // to the type T.

            return type.cast(obj);
        }

        @Override
        public int insert(String sql, String[] genColNames, Object[] genValues,
                          Object... params) throws Exception {

            return jdbcTemplate.insert(sql, genColNames, genValues, params);
        }

        @Override
        public int execDML(String sql, Object... params) throws Exception {

            return jdbcTemplate.update(sql, params);
        }

        @Override
        public <T> T query(final Class<T> type, String sql, Object... params)
                throws Exception {

            RowMapper<T> rowMapper = new RowMapper<T>() {

                public T mapRow(final ResultSet rs, int rowNum)
                        throws SQLException {

                    // the first column is 1
                    T res = type.cast(rs.getObject(1));

                    if (rs.next()) {
                        throw new SQLException("More than 1 row available");
                    }

                    return res;
                }
            };

            return jdbcTemplate.query(sql, params, rowMapper).get(0);
        }

        @Override
        public <T> List<T> queryList(final Class<T> type, String sql,
                                     Object... params) throws Exception {

            final ArrayList<T> res = new ArrayList<T>();

            RowMapper<Void> rowMapper = new RowMapper<Void>() {

                public Void mapRow(final ResultSet rs, int rowNum)
                        throws SQLException {

                    try {
                        // the first column is 1
                        T t = type.cast(rs.getObject(1));
                        res.add(t);
                    } catch (Exception e) {
                        throw new SQLException(e);
                    }

                    return null;
                }
            };

            jdbcTemplate.query(sql, params, rowMapper);

            return res;
        }

        @Override
        public <T> T queryDto(String sql, final RowHandler<T> rowHandler,
                              Object... params) throws Exception {

            RowMapper<T> rowMapper = new RowMapper<T>() {

                public T mapRow(final ResultSet rs, int rowNum)
                        throws SQLException {

                    RowData vr = new RowData() {

                        public <V> V getValue(Class<V> type, String columnLabel)
                                throws Exception {

                            return type.cast(rs.getObject(columnLabel));
                        }
                    };

                    T res;

                    try {
                        res = rowHandler.handleRow(vr);
                    } catch (Exception e) {
                        throw new SQLException(e);
                    }

                    if (rs.next()) {
                        throw new SQLException("More than 1 row available");
                    }

                    return res;
                }
            };

            return jdbcTemplate.query(sql, params, rowMapper).get(0);
        }

        @Override
        public <T> List<T> queryDtoList(String sql,
                                        final RowHandler<T> rowHandler, Object... params)
                throws Exception {

            final ArrayList<T> res = new ArrayList<T>();

            RowMapper<Void> rowMapper = new RowMapper<Void>() {

                public Void mapRow(final ResultSet rs, int rowNum)
                        throws SQLException {

                    RowData vr = new RowData() {

                        public <V> V getValue(Class<V> type, String columnLabel)
                                throws Exception {

                            return type.cast(rs.getObject(columnLabel));
                        }
                    };

                    try {
                        T t = rowHandler.handleRow(vr);
                        res.add(t);
                    } catch (Exception e) {
                        throw new SQLException(e);
                    }

                    return null;
                }
            };

            jdbcTemplate.query(sql, params, rowMapper);

            return res;
        }
    }
}