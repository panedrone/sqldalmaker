<?xml version="1.0" encoding="UTF-8"?>
<settings xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="settings.xsd">

    <!-- target: base path to the folder/package of generated files (relative
        to the project root); ensure presence of __init__.py for Python; -->
    <!-- sql: base folder of SQL files (relative to the project root); -->

    <folders target="src" sql="sqldalmaker/sql"/>

    <!-- scope (only Java, Go, PHP): the name of package (Java, Go) or name-space
        (PHP) for DTO; -->
    <!-- inheritance: (only Java) fully-qualified name of base class; example
        for GWT: 1) inheritance="implements com.google.gwt.user.client.rpc.IsSerializable"
        2) target class: public class Word implements com.google.gwt.user.client.rpc.IsSerializable... -->
    <!-- field-names-mode (Java, PHP, Go): 0 - TitleCase, 1 - camelCase; 2 - snake_case; -->
    <!-- single-file: for future use. -->

    <dto scope="com.mycom.myproject.dto" inheritance="" field-names-mode="1" single-file=""/>

    <!-- scope (only Java, Go, PHP): the name of package (Java, Go) or name-space
        (PHP) for DAO; -->

    <dao scope="com.mycom.myproject.dao"/>

    <!-- location of external VM file (relative to the project root): -->

    <external-vm-file path=""/>

    <!-- IDE integration -->

    <ide event-log="true"/>

    <!-- prefix of generated C++ classes: -->

    <cpp class-prefix=""/>

    <!-- jar: location of JDBC driver JAR file (relative to the project root); -->
    <!-- class: JDBC driver class name; -->
    <!-- url: JDBC connection URL (use $PROJECT_DIR$ or ${project_loc} if you
        need to specify project path); -->
    <!-- user: user name; -->
    <!-- pwd: password; -->

    <jdbc jar="lib/mysql-connector-java-5.1.22-bin.jar"
          class="com.mysql.jdbc.Driver" url="jdbc:mysql://localhost/orders"
          user="root" pwd="root"/>

    <!-- tag 'type-map' specifies how the types detected by
         code generator (JDBC) are rendered in target code. -->

    <!-- if <type detected=<JDBC type> is missing in 'type-map', then 'default' is used. -->

    <!-- if 'default' is empty, detected type is rendered as-is. -->

    <!-- this is why type-map for Java+JDBC is empty: -->

    <!--    <type-map default="">-->
    <!--    </type-map>-->

    <!-- The types detected by JDBC and the types of Android run-time may differ: -->

    <!--    <type-map default="">-->
    <!--        <type detected="java.lang.Integer" target="java.lang.Long"/>-->
    <!--    </type-map>-->

    <!-- if the type is defined in XML meta-program explicitly,
         it will be rendered as-is anyway (without considering type-map) -->

    <!-- Example for Go and SQLite3: -->

    <!-- use ':' to specify imports:  <type detected="java.util.Date" target="time:time.Time"/>-->

    <!--    <type-map default="">-->
    <!--        <type detected="java.lang.Integer" target="int64${json}" />-->
    <!--        <type detected="java.lang.Double" target="float64${json}"/>-->   <!-- go_sqlite3_northwindEF -->
    <!--        <type detected="java.lang.Float" target="float64${json}" />-->
    <!--        <type detected="java.lang.String" target="string${json}" />-->
    <!--        <type detected="byte[]" target="byte[]" />-->
    <!--        <type detected="java.lang.Object" target="interface{}${json}" />-->
    <!--    </type-map>-->

    <!-- Example for Go and MySQL: -->

    <!--    <type-map default="">-->
    <!--        <type detected="java.lang.Short" target="int32${json}"/>-->
    <!--        <type detected="java.lang.Integer" target="int64${json}"/>-->
    <!--        <type detected="java.lang.String" target="string${json}"/>-->
    <!--        <type detected="java.util.Date" target="time:time.Time${json}"/>-->
    <!--        <type detected="byte[]" target="string${json}"/>-->
    <!--        <type detected="java.lang.Boolean" target="int64${json}"/>-->
    <!--        <type detected="java.lang.Float" target="float64${json}"/>-->
    <!--        <type detected="java.math.BigDecimal" target="float64${json}"/>-->
    <!--        <type detected="float" target="float64"/>-->
    <!--        <type detected="java.lang.Object" target="interface{}${json}" />-->
    <!--    </type-map>-->

    <!-- Example for C++ and SQLite3: -->

    <!--    <type-map default="CValue">-->
    <!--        <type detected="java.lang.Integer" target="CLong"/>-->
    <!--        <type detected="java.lang.Double" target="CDouble"/>-->   <!-- go_sqlite3_northwindEF -->
    <!--        <type detected="java.lang.Float" target="CDouble"/>-->
    <!--        <type detected="java.lang.String" target="CText"/>-->
    <!--        <type detected="byte[]" target="CBlob"/>-->
    <!--    </type-map>-->

    <!-- Example for PHP based on this -->
    <!-- https://www.w3schools.com/php/php_datatypes.asp -->

    <!--    <type-map default="">-->
    <!--        <type detected="java.lang.Short" target="Integer"/>-->
    <!--        <type detected="java.lang.Integer" target="Integer"/>-->
    <!--        <type detected="java.lang.Long" target="Integer"/>-->
    <!--        <type detected="java.lang.Float" target="Float"/>-->
    <!--        <type detected="java.lang.Double" target="Float"/>-->
    <!--        <type detected="byte[]" target="Array"/>-->
    <!--        <type detected="java.lang.Boolean" target="Boolean"/>-->
    <!--        <type detected="java.lang.String" target="String"/>-->
    <!--        <type detected="java.lang.Object" target="Object"/>-->
    <!--    </type-map>-->

    <!-- Example for Python and MySQL: -->

    <type-map default="">

        <!-- ***** sqlalchemy (sa) ************************************ -->

        <!-- https://github.com/panedrone/sqldalmaker/blob/master/src/resources/data_store_sqlalchemy.py-->

        <!-- all numerics for oracle_cx -->

        <type detected="sa-java.math.BigDecimal" target="${type}|0:NUMBER"/>

        <!-- numerics for others -->

        <!--        <type detected="sa-java.lang.Short" target="${type}|0:SmallInteger"/>-->
        <!--        <type detected="sa-java.lang.Integer" target="${type}|0:Integer"/>-->
        <!--        <type detected="sa-java.lang.Long" target="${type}|0:BigInteger"/>-->

        <!--        <type detected="sa-java.lang.Float" target="${type}|0:Float"/>-->
        <!--        <type detected="sa-java.lang.Double" target="${type}|0:Float"/>-->
        <!--        <type detected="sa-java.math.BigDecimal" target="${type}|0:Float"/>-->

        <type detected="sa-java.util.Date" target="${type}|0:DateTime"/>
        <type detected="sa-java.lang.String" target="${type}|0:String"/>
        <type detected="sa-java.lang.Boolean" target="${type}|0:Boolean"/>
        <type detected="sa-byte[]" target="${type}|0:LargeBinary"/>

        <type detected="sa-java.lang.Object" target="${type-unknown}"/>

        <!-- ****** raw SQL (without sqlalchemy) ********************** -->

        <type detected="java.lang.Short" target="int"/>
        <type detected="java.lang.Integer" target="int"/>
        <type detected="java.lang.Long" target="long"/>

        <type detected="java.lang.Double" target="float"/>
        <type detected="java.lang.Float" target="float"/>
        <type detected="java.math.BigDecimal" target="float"/>

        <type detected="java.util.Date" target="str"/>
        <type detected="java.lang.String" target="str"/>
        <type detected="java.lang.Boolean" target="bool"/>
        <type detected="byte[]" target="bytes"/>

        <type detected="java.lang.Object" target="object"/>

    </type-map>

    <global-macros>

        <!-- =built-in= is a key-word -->

        <global-macro name="${column}" value="=built-in="/>
        <global-macro name="${lower_snake_case(column)}" value="=built-in="/>
        <global-macro name="${camelCase(column)}" value="=built-in="/>
        <global-macro name="${TitleCase(column)}" value="=built-in="/>
        <global-macro name="${kebab-case(column)}" value="=built-in="/>

        <global-macro name="${sqlalchemy-params}" value="=built-in="/>

        <!-- go json tags: -->

        <global-macro name="${col}" value="${lower_snake_case(column)}"/>

        <global-macro name="${json}" value=" `json:&quot;${col}${0}&quot;`"/>

        <!-- sqlalchemy Column: -->

        <global-macro name="${type}" value="= Column('${column}', ${0}${sqlalchemy-params}${1})${comment}"/>

        <global-macro name="${type-unknown}" value="= Column('${column}'${sqlalchemy-params}${1})${comment}"/>

        <!-- TODO: for macros like "${vm:...}", the values are rendered by Apache Velocity -->

        <global-macro name="${vm:sqlalchemy-params}"
                      value="#if($fi.isPK()), primary_key=True#end#if($fi.isAI()), auto_increment=True#end"/>

        <!-- $fi in this ^^ example is a predefined parameter of class FieldInfo:

                    class FieldInfo:
                        String getName();
                        String getType();
                        String getColumnName();
                        boolean isAI();
                        boolean isPK();
                        String getComment();
                        String getterMethod();
                        String setterMethod();
                    -->

    </global-macros>

</settings>