<?xml version="1.0" encoding="UTF-8"?>
<settings xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="settings.xsd">

    <!-- target: base path to the folder/package of generated files (relative
        to the project root); ensure presence of __init__.py for Python; -->
    <!-- sql: base folder of SQL files (relative to the project root); -->

    <folders target="src" sql="sdm/sql"/>

    <!-- scope (only Java, Go, PHP): the name of package (Java, Go) or name-space
        (PHP) for DTO; -->
    <!-- inheritance: (only Java) fully-qualified name of base class; example
        for GWT: 1) inheritance="implements com.google.gwt.user.client.rpc.IsSerializable"
        2) target class: public class Word implements com.google.gwt.user.client.rpc.IsSerializable... -->
    <!-- field-names-mode (Java, PHP, Go): 0 - TitleCase, 1 - camelCase; 2 - snake_case; -->
    <!-- single-file: for future use. -->
	<!-- macro: for future use. -->
	
    <dto scope="com.mycom.myproject.dto" inheritance="" field-names-mode="1" single-file="" macro=""/>

    <!-- scope (only Java, Go, PHP): the name of package (Java, Go) or name-space
        (PHP) for DAO; -->
	<!-- macro: for future use. -->

    <dao scope="com.mycom.myproject.dao" macro=""/>

    <!-- location of external VM file (relative to the project root): -->

    <external-vm-file path=""/>

    <!-- IDE integration -->

    <ide event-log="true"/>

    <!-- prefix of generated C++ classes: -->

    <cpp class-prefix=""/>

    <!-- jar: location of JDBC driver JAR file (relative to the project root); -->
    <!-- class: JDBC driver class name; -->
    <!-- url: JDBC connection URL (use $PROJECT_DIR$ or ${project_loc} if you
        need to specify project path); -->
    <!-- user: user name; -->
    <!-- pwd: password; -->

    <jdbc jar="lib/mysql-connector-java-5.1.22-bin.jar"
          class="com.mysql.jdbc.Driver" url="jdbc:mysql://localhost/orders"
          user="root" pwd="root"/>

    <!-- tag 'type-map' specifies how the types detected by
         code generator (JDBC) are rendered in target code. -->

    <!-- if <type detected=<JDBC type> is missing in 'type-map', then 'default' is used. -->

    <!-- if 'default' is empty, detected type is rendered as-is. -->

    <!-- this is why type-map for Java+JDBC is empty: -->

    <!--    <type-map default="">-->
    <!--    </type-map>-->

    <!-- The types detected by JDBC and the types of Android run-time may differ: -->

    <!--    <type-map default="">-->
    <!--        <type detected="java.lang.Integer" target="java.lang.Long"/>-->
    <!--    </type-map>-->

    <!-- if the type is defined in XML meta-program explicitly,
         it will be rendered as-is anyway (without considering type-map) -->

    <!-- Example for Go and SQLite3: -->

    <!-- use ':' to specify imports:  <type detected="java.util.Date" target="time:time.Time"/>-->

    <!--    <type-map default="">-->
    <!--        <type detected="java.lang.Integer" target="int64${json}" />-->
    <!--        <type detected="java.lang.Double" target="float64${json}"/>-->   <!-- go_sqlite3_northwindEF -->
    <!--        <type detected="java.lang.Float" target="float64${json}" />-->
    <!--        <type detected="java.lang.String" target="string${json}" />-->
    <!--        <type detected="byte[]" target="byte[]" />-->
    <!--        <type detected="java.lang.Object" target="interface{}${json}" />-->
    <!--    </type-map>-->

    <!-- Example for C++ and SQLite3: -->

    <!--    <type-map default="CValue">-->
    <!--        <type detected="java.lang.Integer" target="CLong"/>-->
    <!--        <type detected="java.lang.Double" target="CDouble"/>-->   <!-- go_sqlite3_northwindEF -->
    <!--        <type detected="java.lang.Float" target="CDouble"/>-->
    <!--        <type detected="java.lang.String" target="CText"/>-->
    <!--        <type detected="byte[]" target="CBlob"/>-->
    <!--    </type-map>-->

    <!-- Example for PHP based on this -->
    <!-- https://www.w3schools.com/php/php_datatypes.asp -->

    <!--    <type-map default="">-->
    <!--        <type detected="java.lang.Short" target="Integer"/>-->
    <!--        <type detected="java.lang.Integer" target="Integer"/>-->
    <!--        <type detected="java.lang.Long" target="Integer"/>-->
    <!--        <type detected="java.lang.Float" target="Float"/>-->
    <!--        <type detected="java.lang.Double" target="Float"/>-->
    <!--        <type detected="byte[]" target="Array"/>-->
    <!--        <type detected="java.lang.Boolean" target="Boolean"/>-->
    <!--        <type detected="java.lang.String" target="String"/>-->
    <!--        <type detected="java.lang.Object" target="Object"/>-->
    <!--    </type-map>-->

    <!-- Examples for Python: -->

    <type-map default="">

        <!-- Example for Go and MySQL|SQLite3: -->

<!--        <type detected="gorm-java.lang.Short" target="int32${json-gorm}"/>-->
<!--        <type detected="gorm-java.lang.Integer" target="int64${json-gorm}"/>-->
<!--        <type detected="gorm-java.lang.String" target="string${json-gorm}"/>-->
<!--        <type detected="gorm-java.util.Date" target="time:time.Time${json-gorm}"/>-->
<!--        <type detected="gorm-byte[]" target="string${json-gorm}"/>-->
<!--        <type detected="gorm-java.lang.Boolean" target="int64${json-gorm}"/>-->
<!--        <type detected="gorm-java.lang.Float" target="float64${json-gorm}"/>-->
<!--        <type detected="gorm-java.math.BigDecimal" target="float64${json-gorm}"/>-->
<!--        <type detected="gorm-java.lang.Object" target="interface{}${json}-gorm"/>-->

<!--        <type detected="java.lang.Short" target="int32${json}"/>-->
<!--        <type detected="java.lang.Integer" target="int64${json}"/>-->
<!--        <type detected="java.lang.String" target="string${json}"/>-->
<!--        <type detected="java.util.Date" target="time:time.Time${json}"/>-->
<!--        <type detected="byte[]" target="string${json}"/>-->
<!--        <type detected="java.lang.Boolean" target="int64${json}"/>-->
<!--        <type detected="java.lang.Float" target="float64${json}"/>-->
<!--        <type detected="java.math.BigDecimal" target="float64${json}"/>-->
<!--        <type detected="float" target="float64"/>-->
<!--        <type detected="java.lang.Object" target="interface{}${json}"/>-->

        <!-- ***** sqlalchemy (sa) ****************** -->

        <!-- https://github.com/panedrone/sqldalmaker/blob/master/src/resources/data_store_sqlalchemy.py-->

        <!-- all numerics for oracle_cx -->

        <!--        <type detected="sa-java.math.BigDecimal" target="${sa-type}|0:NUMBER"/>-->

        <!-- numerics for others -->

        <type detected="sa-java.lang.Short" target="${sa-type}|0:SmallInteger"/>
        <type detected="sa-java.lang.Integer" target="${sa-type}|0:Integer"/>
        <type detected="sa-java.lang.Long" target="${sa-type}|0:BigInteger"/>

        <type detected="sa-java.lang.Float" target="${sa-type}|0:Float"/>
        <type detected="sa-java.lang.Double" target="${sa-type}|0:Float"/>
        <type detected="sa-java.math.BigDecimal" target="${sa-type}|0:Float"/>

        <type detected="sa-java.util.Date" target="${sa-type}|0:DateTime"/>
        <type detected="sa-java.lang.String" target="${sa-type}|0:String"/>
        <type detected="sa-java.lang.Boolean" target="${sa-type}|0:Boolean"/>
        <type detected="sa-byte[]" target="${sa-type}|0:LargeBinary"/>

        <type detected="sa-java.lang.Object" target="${sa-type-unknown}"/>

        <!-- ***** django (dj) ****************** -->

        <type detected="dj-java.lang.Short" target="${dj-type}|0:IntegerField"/>
        <type detected="dj-java.lang.Integer" target="${dj-type}|0:IntegerField"/>
        <type detected="dj-java.lang.Long" target="${dj-type}|0:BigIntegerField"/>

        <type detected="dj-java.lang.Float" target="${dj-type}|0:FloatField"/>
        <type detected="dj-java.lang.Double" target="${dj-type}|0:FloatField"/>
        <type detected="dj-java.math.BigDecimal" target="${dj-type}|0:DecimalField"/>

        <type detected="dj-java.util.Date" target="${dj-type}|0:DateTimeField"/>
        <type detected="dj-java.lang.String" target="${dj-type}|0:CharField"/>
        <type detected="dj-java.lang.Boolean" target="${dj-type}|0:BooleanField"/>
        <type detected="dj-byte[]" target="${dj-type}|0:BinaryField"/>

        <type detected="dj-java.lang.Object" target="${dj-type}|0:CharField"/>

        <type detected="dj-int" target="${dj-type}|0:IntegerField"/>
        <type detected="dj-long" target="${dj-type}|0:BigIntegerField"/>

        <type detected="dj-float" target="${dj-type}|0:FloatField"/>

        <type detected="dj-date" target="${dj-type}|0:DateTimeField"/>
        <type detected="dj-str" target="${dj-type}|0:CharField"/>
        <type detected="dj-bool" target="${dj-type}|0:BooleanField"/>
        <!--        <type detected="dj-byte[]" target="${dj-type}|0:BinaryField"/> -->

        <type detected="dj-object" target="${dj-type}|0:CharField"/>

        <!-- ****** raw SQL ************************ -->

        <type detected="java.lang.Short" target="int"/>
        <type detected="java.lang.Integer" target="int"/>
        <type detected="java.lang.Long" target="long"/>

        <type detected="java.lang.Double" target="float"/>
        <type detected="java.lang.Float" target="float"/>
        <type detected="java.math.BigDecimal" target="float"/>

        <type detected="java.util.Date" target="str"/>
        <type detected="java.lang.String" target="str"/>
        <type detected="java.lang.Boolean" target="bool"/>
        <type detected="byte[]" target="bytes"/>

        <type detected="java.lang.Object" target="object"/>

    </type-map>

    <macros>

        <!-- =built-in= is a key-word -->

        <macro name="${column}" value="=built-in="/>
        <macro name="${lower_snake_case(column)}" value="=built-in="/>
        <macro name="${camelCase(column)}" value="=built-in="/>
        <macro name="${TitleCase(column)}" value="=built-in="/>
        <macro name="${kebab-case(column)}" value="=built-in="/>

        <!-- Go tags: -->

        <macro name="${json}" value=" `json:&quot;${col}${0}&quot;`"/>

        <macro name="${json-gorm}"
               value=" `json:&quot;${col}${0}&quot; gorm:&quot;column:${column}${gorm-params}&quot;`"/>

        <!-- sqlalchemy Column: -->

        <macro name="${sa-type-unknown}" value="${sa-column-base}|type:"/>
        <macro name="${sa-type}" value="${sa-column-base}|type:, ${0}"/>

        <!-- djando field: -->

        <macro name="${dj-type}" value="${dj-field}"/>

        <!-- In VM-based macros dedicated to render the fields/columns,
             "$fi" is a predefined variable of class FieldInfo:

                class FieldInfo:
                    String getName()
                    String getType()
                    String getColumnName()
                    int getColumnSize()
                    boolean isAI()
                    boolean isPK()
                    String getFK()
                    boolean isNullable()
                    boolean isIndexed()
                    boolean isUnique()
                    String getComment()
                    String getterMethod()
                    String setterMethod()
                        -->

        <macro name="${gorm-params}">

            <!-- https://developpaper.com/getting-started-with-gorm/-->

            <vm-xml>
                <if var="$fi.PK">
                    <print var=";primary_key"/>
                </if>
                <if var="$fi.AI">
                    <print var=";auto_increment"/>
                </if>
                <if var="!$fi.PK">
                    <if var="$fi.Unique &amp;&amp; $fi.Indexed">
                        <print var=";unique_index"/>
                        <else>
                            <if var="$fi.Unique">
                                <print var=";unique"/>
                            </if>
                            <if var="$fi.Indexed">
                                <print var=";index"/>
                            </if>
                        </else>
                    </if>
                    <if var="!$fi.Nullable">
                        <print var=";not null"/>
                    </if>
                </if>
            </vm-xml>
        </macro>

        <macro name="${sa-column-base}">
            <vm>
                <![CDATA[= Column('${column}'${type}#if($fi.ColumnSize>0)($fi.ColumnSize)#end#if($fi.FK), ForeignKey('$fi.FK')#end
#if($fi.PK), primary_key=True#end
#if($fi.AI), autoincrement=True#end
#if(!$fi.PK)
#if($fi.Indexed), index=True#end
#if($fi.Unique), unique=True#end
#if($fi.Nullable), nullable=True#end
#end)${comment}]]>
            </vm>
        </macro>

        <macro name="${dj-field}">
            <vm>
                <![CDATA[
= models.#if($fi.AI)AutoField#else${0}#end(db_column='$fi.ColumnName'#if($fi.ColumnSize>0), max_length=$fi.ColumnSize#end
#if($fi.PK), primary_key=True#else
#if($fi.Indexed), db_index=True#end
#if($fi.Unique), unique=True#end
#if($fi.Nullable), blank=True, null=True#end
#end${1})${comment}]]>
            </vm>
        </macro>

        <macro name="${sa-column-base2}">
            <vm-xml>
                <print var="= Column('${column}'${type}"/>
                <if var="$fi.ColumnSize>0">
                    <print var="($fi.ColumnSize)"/>
                </if>
                <if var="$fi.FK">
                    <print var=", ForeignKey('$fi.FK')"/>
                </if>
                <if var="$fi.PK">
                    <print var=", primary_key=True"/>
                </if>
                <if var="$fi.AI">
                    <print var=", autoincrement=True"/>
                </if>
                <if var="!$fi.PK">
                    <if var="$fi.Indexed">
                        <print var=", index=True"/>
                    </if>
                    <if var="$fi.Unique">
                        <print var=", unique=True"/>
                    </if>
                    <if var="$fi.Nullable">
                        <print var=", nullable=True"/>
                    </if>
                </if>
                <print var=")${comment}"/>
            </vm-xml>
        </macro>

        <macro name="${dj-field2}">
            <vm-xml>
                <print var="= models."/>
                <if var="$fi.AI">
                    <print var="AutoField"/>
                    <else>
                        <print var="${0}"/>
                    </else>
                </if>
                <print var="(db_column='$fi.ColumnName'"/>
                <if var="$fi.isPK()">
                    <print var=", primary_key=True"/>
                </if>
                <if var="$fi.ColumnSize>0">
                    <print var=", max_length=$fi.ColumnSize"/>
                </if>
                <if var="!$fi.PK">
                    <if var="$fi.Indexed">
                        <print var=", db_index=True"/>
                    </if>
                    <if var="$fi.Unique">
                        <print var=", unique=True"/>
                    </if>
                    <if var="$fi.Nullable">
                        <print var=", blank=True, null=True"/>
                    </if>
                </if>
                <print var="${1})${comment}"/>
            </vm-xml>
        </macro>

    </macros>

</settings>