package com.sqldalmaker;

import com.mycom.myproject.dao.TestDao;
import oracle.jdbc.OracleTypes;
import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.OutParameter;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;

import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/*
    SQL DAL Maker Website: http://sqldalmaker.sourceforge.net

    This is an example of how to implement DataStore in Java + Apache DbUtils.
    Copy-paste this code to your project and change it for your needs.

    Improvements are welcome: sqldalmaker@gmail.com
*/
public class DataStoreManager {

    public static class OutParam<T> {

        private final int sqlType;
        private final Class<T> javaType;
        private T value = null;

        public OutParam(int sqlType, Class<T> javaType) {
            this.sqlType = sqlType;
            this.javaType = javaType;
        }

        public OutParam(int sqlType, Class<T> javaType, T value) {
            this.sqlType = sqlType;
            this.javaType = javaType;
            this.value = value;
        }

        public int getSqlType() {
            return this.sqlType;
        }

        public Class<T> getJavaType() {
            return this.javaType;
        }

        public T getValue() {
            return this.value;
        }

        public void setValue(T value) {
            this.value = value;
        }
    }

    private Connection conn;

    private boolean is_oracle;

    public void open() throws Exception {
        conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl", "ORDERS", "sa");
        // conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "ORDERS", "root");
        // conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/test", "postgres", "sa");
        // conn = DriverManager.getConnection("jdbc:mysql://localhost/sakila", "root", "root");
        // conn = DriverManager.getConnection("jdbc:sqlserver://localhost\\SQLEXPRESS;databaseName=AdventureWorks2014", "sa", "root");
        // conn = DriverManager.getConnection("jdbc:h2:todo_list", "", "");
        // conn = DriverManager.getConnection("jdbc:sqlite:thesaurus.sqlite", "", "");
        DatabaseMetaData dmd = conn.getMetaData();
        String url = dmd.getURL();
        is_oracle = url.contains("oracle");
        conn.setAutoCommit(false);
    }

    public void begin() throws Exception {
        conn.setAutoCommit(false);
    }

    public void commit() throws Exception {
        conn.commit();
    }

    public void rollback() throws Exception {
        conn.rollback();
    }

    public void close() throws Exception {
        // connection.setAutoCommit(true) is required for
        // org.apache.derby.jdbc.ClientDriver to prevent
        // java.sql.SQLException: Cannot close a connection while a transaction
        // is still active.
        conn.setAutoCommit(true);
        conn.close();
    }

    private final MyDataStore ds = new MyDataStore();

    public TestDao createTestDao() {
        return new TestDao(ds);
    }

    private class MyDataStore extends DataStore {

        private boolean is_string_value(Class<?> inValueType) {
            // Consider any CharSequence (including StringBuffer and
            // StringBuilder) as a String.
            return (CharSequence.class.isAssignableFrom(inValueType)
                    || StringWriter.class.isAssignableFrom(inValueType));
        }

        private boolean is_date_value(Class<?> inValueType) {
            return (java.util.Date.class.isAssignableFrom(inValueType)
                    && !(java.sql.Date.class.isAssignableFrom(inValueType)
                    || java.sql.Time.class.isAssignableFrom(inValueType)
                    || java.sql.Timestamp.class.isAssignableFrom(inValueType)));
        }

        protected void prepare_params(Object... params) {
            for (int i = 0; i < params.length; i++) {
                if (params[i] != null) {
                    if (is_string_value(params[i].getClass())) {
                        params[i] = params[i].toString();
                    } else if (is_date_value(params[i].getClass())) {
                        params[i] = new java.sql.Timestamp(((java.util.Date) params[i]).getTime());
                    }
                }
            }
        }

        private boolean is_jdbc_stored_proc_call(String jdbc_sql) {
            jdbc_sql = jdbc_sql.trim();
            String[] parts1 = jdbc_sql.split("\\s+");
            /* It works with Oracle: */
            if (parts1.length > 0 && parts1[0].trim().toLowerCase().equals("begin")) {
            /* For the others, you may need something like
            if (jdbc_sql.startsWith("{") & jdbc_sql.endsWith("}")) {
                jdbc_sql = jdbc_sql.substring(1, jdbc_sql.length() - 1);
            }
            if (parts1.length > 0 && parts1[0].trim().toLowerCase().equals("call")) { */
                return true;
            }
            String[] parts = jdbc_sql.split("\\s+");
            if (parts.length < 2) {
                return false;
            }
            String call = parts[0];
            return call.compareToIgnoreCase("call") == 0;
        }

        private class MyQueryRunner extends QueryRunner {

            public MyQueryRunner() {
                this(true); // pmdKnownBroken == true excludes call of getParameterMetaData
//		        if (!pmdKnownBroken) {
//		            try {
//		                pmd = stmt.getParameterMetaData();
            }

            public MyQueryRunner(boolean pmdKnownBroken) {
                super(pmdKnownBroken);
            }

            private boolean _prepare_call_params(boolean allow_cursor_params, Object[] params, List<Object> call_params) throws SQLException {
                boolean query_out_cursors = false;
                for (int i = 0; i < params.length; i++) {
                    if (params[i] instanceof RowHandler2) {
                        if (allow_cursor_params) {
                            // uncomment/comment lines below if you are not on Oracle:
                            // throw new SQLException("RowHandler params are allowed only for Oracle SYS_REFCURSOR-s");
                            call_params.add(new OutParameter<Object>(OracleTypes.CURSOR, Object.class));
                            query_out_cursors = true;
                        } else {
                            throw new SQLException(RecordHandler.class.getName() + " are not allowed here");
                        }
                    } else if (params[i] instanceof RowHandler2[]) {
                        // implicit cursor: do nothing
                    } else if (params[i] instanceof OutParam) {
                        OutParam cp = (OutParam) params[i];
                        Object param_value = cp.getValue();
                        //noinspection unchecked
                        call_params.add(new OutParameter(cp.getSqlType(), cp.getJavaType(), cp.getValue()));
                        // call_params.add(param_value);
                    } else {
                        call_params.add(params[i]);
                    }
                }
                return query_out_cursors;
            }

            public <T> void query_call(Connection conn, String sql, ResultSetHandler<T> rsh, Object... params) throws SQLException {
                CallableStatement stmt = conn.prepareCall(sql);
                try {
                    List<Object> call_params = new ArrayList<Object>();
                    _prepare_call_params(false, params, call_params);
                    super.fillStatement(stmt, call_params.toArray());
                    // the code to work with Oracle implicit SYS_REFCURSOR-s
                    // https://en.it1352.com/article/8242caae4610471d962d4b45c13ae070.html
                    // ........................................
                    if (is_oracle) {
                        stmt.execute(); // it returns false for Oracle SP with implicit ref-cursors
                        while (stmt.getMoreResults()) {
                            ResultSet rs = stmt.getResultSet();
                            try {
                                rsh.handle(rs);
                            } finally {
                                DbUtils.close(rs);
                            }
                        }
                    } else {
                        // ........................................
                        // the code to work with MySQL SP returning ResultSet-s
                        // ........................................
                        ResultSet rs = stmt.executeQuery();
                        while (true) {
                            try {
                                rsh.handle(rs);
                            } finally {
                                DbUtils.close(rs);
                            }
                            if (stmt.getMoreResults()) {
                                rs = stmt.getResultSet();
                            } else {
                                break;
                            }
                        }
                    }
                    // ........................................
                    _read_out_params(stmt, params);
                } finally {
                    DbUtils.close(stmt);
                }
            }

            public int execute_call(Connection conn, String sql, Object... params) throws Exception {
                CallableStatement stmt = conn.prepareCall(sql);
                try {
                    List<Object> call_params = new ArrayList<Object>();
                    boolean query_out_cursors = _prepare_call_params(true, params, call_params);
                    super.fillStatement(stmt, call_params.toArray());
                    if (query_out_cursors) {
                        // Using Ref Cursors To Return Recordsets
                        // https://oracle-base.com/articles/misc/using-ref-cursors-to-return-recordsets
                        boolean is_rs = stmt.execute();
                        if (is_rs) {
                            throw new SQLException("Invalid usage of Out Ref-Cursors. First result of stmt.execute() is a ResultSet object.");
                        }
                        for (int i = 0; i < params.length; i++) {
                            if (params[i] instanceof RowHandler2) {
                                final RowHandler2 rh = (RowHandler2) params[i];
                                final ResultSet rs_cursor = (ResultSet) stmt.getObject(i + 1);
                                final RowData row_data = new RowData() {
                                    @Override
                                    public <V> V getValue(Class<V> type, String columnLabel) throws Exception {
                                        return type.cast(rs_cursor.getObject(columnLabel));
                                    }
                                };
                                try {
                                    while (rs_cursor.next()) {
                                        try {
                                            rh.handleRow(row_data);
                                        } catch (Exception e) {
                                            throw new SQLException(e);
                                        }
                                    }
                                } finally {
                                    DbUtils.close(rs_cursor);
                                }
                            } else if (params[i] instanceof OutParam) {
                                _read_out_param(stmt, i, params);
                            }
                        }
                    } else { // if (query_out_cursors) {
                        boolean implicit_result_sets = false;
                        for (int i = 0; i < params.length; i++) {
                            if (params[i] instanceof RowHandler2[]) {
                                implicit_result_sets = true;
                                break;
                            }
                        }
                        if (implicit_result_sets) {
                            class RC_Handler {
                                // make it class field to allow both changing and access from RowData
                                private ResultSet rs_implicit;

                                private void fetch(RowData row_data, RowHandler2 rh) throws SQLException {
                                    try {
                                        while (rs_implicit.next()) {
                                            try {
                                                rh.handleRow(row_data);
                                            } catch (Exception e) {
                                                throw new SQLException(e);
                                            }
                                        }
                                    } finally {
                                        DbUtils.close(rs_implicit);
                                    }
                                }

                                public void fetch_all() throws SQLException {
                                    final RowData row_data = new RowData() {
                                        @Override
                                        public <V> V getValue(Class<V> type, String columnLabel) throws Exception {
                                            return type.cast(rs_implicit.getObject(columnLabel));
                                        }
                                    };
                                    //
                                    // Oracle wants stmt.execute() --> getMoreResults() --> getResultSet()
                                    // MySQL wants executeQuery() first
                                    //
                                    if (is_oracle) {
                                        stmt.execute(); // it returns false for Oracle SP with implicit ref-cursors
                                        for (int i = 0; i < params.length; i++) {
                                            if (params[i] instanceof RowHandler2[]) {
                                                RowHandler2[] rh_arr = (RowHandler2[]) params[i];
                                                int rh_index = 0;
                                                while (stmt.getMoreResults()) { // move trough result-sets
                                                    rs_implicit = stmt.getResultSet();
                                                    fetch(row_data, rh_arr[rh_index]);
                                                    rh_index++;
                                                }
                                            }
                                        }
                                    } else {
                                        rs_implicit = stmt.executeQuery();
                                        for (int i = 0; i < params.length; i++) {
                                            if (params[i] instanceof RowHandler2[]) {
                                                RowHandler2[] rh_arr = (RowHandler2[]) params[i];
                                                int rh_index = 0;
                                                while (true) { // move trough result-sets
                                                    fetch(row_data, rh_arr[rh_index]);
                                                    rh_index++;
                                                    if (stmt.getMoreResults()) {
                                                        rs_implicit = stmt.getResultSet();
                                                    } else {
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            RC_Handler rch = new RC_Handler();
                            rch.fetch_all();
                        } else {
                            stmt.execute(); // it returns false for Oracle SP with implicit ref-cursors
                        }
                        _read_out_params(stmt, params); // for both implicit RC call and ordinary call
                    }
                } finally {
                    DbUtils.close(stmt);
                }
                return 0;
            }

            private void _read_out_params(CallableStatement stmt, Object... params) throws SQLException {
                for (int i = 0; i < params.length; i++) {
                    _read_out_param(stmt, i, params);
                }
            }

            private void _read_out_param(CallableStatement stmt, int zero_index, Object... params) throws SQLException {
                if (params[zero_index] instanceof OutParam) {
                    Object out_value = stmt.getObject(zero_index + 1);
                    OutParam op = (OutParam) params[zero_index];
                    //noinspection unchecked
                    op.setValue(op.getJavaType().cast(out_value));
                }
            }

            public int insert(String sql, String[] genColNames, Object[] genValues, Object... params)
                    throws SQLException {
                PreparedStatement stmt = null;
                int rows = 0;
                try {
                    stmt = conn.prepareStatement(sql, genColNames);
                    super.fillStatement(stmt, params);
                    rows = stmt.executeUpdate();
                    _do_after_insert(stmt, genValues);
                } catch (SQLException e) {
                    super.rethrow(e, sql, params);
                } finally {
                    DbUtils.close(stmt);
                }
                return rows;
            }

            private void _do_after_insert(PreparedStatement stmt, Object[] genValues) throws SQLException {
                ResultSet keys = stmt.getGeneratedKeys(); // ok even for oracle (why?)
                if (keys != null) {
                    try {
                        int i = 0;
                        while (keys.next()) {
                            // Uncomment the line which is working with your JDBC driver
                            // keys.getBigDecimal(1) works with most of tested drivers (except SQLite)
                            Object obj = keys.getBigDecimal(1);
                            // keys.getObject(1) works with all tested drivers,
                            // but it can return Long for Integer column (MySQL)
                            genValues[i] = obj;
                            i++;
                        }
                    } finally {
                        DbUtils.close(keys);
                    }
                }
            }
        }

        @Override
        public <T> T castGeneratedValue(Class<T> type, Object obj) {
            // You can improve/simplify this method if it is possible with your JDBC driver
            // For many drivers (SQL Server 2008, Derby), keys.getObject(1)
            // returns BigDecimal independently of the type of column
            if (obj instanceof BigDecimal) {
                BigDecimal bigDecimal = (BigDecimal) obj;
                if (Byte.class.equals(type)) {
                    obj = bigDecimal.byteValueExact();
                } else if (Float.class.equals(type)) {
                    // there is no 'exact' version
                    obj = bigDecimal.floatValue();
                } else if (Double.class.equals(type)) {
                    // there is no 'exact' version
                    obj = bigDecimal.doubleValue();
                } else if (Integer.class.equals(type)) {
                    obj = bigDecimal.intValueExact();
                } else if (Long.class.equals(type)) {
                    obj = bigDecimal.longValueExact();
                } else if (BigInteger.class.equals(type)) {
                    obj = bigDecimal.toBigIntegerExact();
                } /*else if (BigDecimal.class.equals(type)) {
                    obj = bigDecimal; // it is BigDecimal initially
                } else if (Object.class.equals(type)) {
                    obj = bigDecimal; // it is Object initially
                } */ else {
                    throw new ClassCastException("Unexpected class '" + type.getName() + "'");
                }
            }
            // cast:
            // Throws:
            // ClassCastException - if the object is not null and is not assignable to the
            // type T.
            return type.cast(obj);
        }

        @Override
        public int insert(String sql, String[] genColNames, Object[] genValues, Object... params) throws SQLException {
            prepare_params(params);
            MyQueryRunner query_runner = new MyQueryRunner();
            return query_runner.insert(sql, genColNames, genValues, params); // TODO: use in-bound
            // QueryRunner.insert(...) instead
        }

        @Override
        public int execDML(String sql, Object... params) throws Exception {
            prepare_params(params);
            MyQueryRunner query_runner = new MyQueryRunner();
            boolean sp = is_jdbc_stored_proc_call(sql);
            if (sp) {
                return query_runner.execute_call(conn, sql, params);
            } else {
                return query_runner.update(conn, sql, params);
            }
        }

        @Override
        public <T> T query(final Class<T> type, String sql, Object... params) throws Exception {
            List<T> list = queryList(type, sql, params);
            if (list == null || list.size() == 0) {
                throw new SQLException("No rows: " + sql); // return null; as alternative
            }
            if (list.size() > 1) {
                throw new SQLException("More than 1 row available: " + sql);
            }
            return list.get(0);
        }

        @Override
        public <T> List<T> queryList(final Class<T> type, String sql, Object... params) throws Exception {
            final List<T> res = new ArrayList<T>();
            if (type == Void.class) {
                ResultSetHandler<Void> rsh = new ResultSetHandler<Void>() {
                    @Override
                    public Void handle(final ResultSet rs) {
                        return null;
                    }
                };
                query(sql, rsh, params);
                res.add(null); // to prevent exception while 'query' instead of 'query-list'
                return res;
            }
            ResultSetHandler<Void> rsh = new ResultSetHandler<Void>() {
                @Override
                public Void handle(final ResultSet rs) throws SQLException {
                    if (!rs.next()) {
                        return null;
                    }
                    Object value = rs.getObject(1);
                    // PostgreSQL: Object value is ResultSet for SQL statements like 'select * from my_func(?, ?)'
                    if (value instanceof ResultSet) {
                        while (true) {
                            final ResultSet rs_value = (ResultSet) value;
                            try {
                                while (rs_value.next()) {
                                    T t = type.cast(rs_value.getObject(1));
                                    res.add(t);
                                }
                            } finally {
                                DbUtils.close(rs_value);
                            }
                            if (rs.next()) {
                                value = rs.getObject(1);
                                if (!(value instanceof ResultSet)) {
                                    throw new SQLException("ResultSet expected");
                                }
                            } else {
                                break;
                            }
                        }
                    } else {
                        T t = type.cast(rs.getObject(1)); // 1st row is already fetched by rs.next()
                        res.add(t);
                        while (rs.next()) {
                            t = type.cast(rs.getObject(1)); // the first column is 1
                            res.add(t);
                        }
                    }
                    return null;
                }
            };
            query(sql, rsh, params);
            return res;
        }

        @Override
        public <T> T queryDto(String sql, final RowHandler<T> rowHandler, Object... params) throws Exception {
            List<T> list = queryDtoList(sql, rowHandler, params);
            if (list == null || list.size() == 0) {
                throw new SQLException("No rows: " + sql); // return null; as alternative
            }
            if (list.size() > 1) {
                throw new SQLException("More than 1 row available: " + sql);
            }
            return list.get(0);
        }

        private <T> void process_row(RowData rowData, RowHandler<T> rowHandler, List<T> res) throws SQLException {
            try {
                T t = rowHandler.handleRow(rowData);
                res.add(t);
            } catch (Exception e) {
                throw new SQLException(e);
            }
        }

        @Override
        public <T> List<T> queryDtoList(String sql, final RowHandler<T> rowHandler, Object... params) throws Exception {
            final List<T> res = new ArrayList<T>();
            ResultSetHandler<Void> rsh = new ResultSetHandler<Void>() {
                @Override
                public Void handle(final ResultSet rs) throws SQLException {
                    if (!rs.next()) {
                        return null;
                    }
                    Object value = rs.getObject(1);
                    // PostgreSQL: Object value is ResultSet for SQL statements like 'select * from my_func(?, ?)'
                    if (value instanceof ResultSet) {
                        while (true) {
                            final ResultSet rs_value = (ResultSet) value;
                            RowData rowData = new RowData() {
                                @Override
                                public <V> V getValue(Class<V> type, String columnLabel) throws Exception {
                                    return type.cast(rs_value.getObject(columnLabel));
                                }
                            };
                            try {
                                while (rs_value.next()) {
                                    process_row(rowData, rowHandler, res);
                                }
                            } finally {
                                DbUtils.close(rs_value);
                            }
                            if (rs.next()) {
                                value = rs.getObject(1);
                                if (!(value instanceof ResultSet)) {
                                    throw new SQLException("ResultSet expected");
                                }
                            } else {
                                break;
                            }
                        }
                    } else {
                        RowData row_data = new RowData() {
                            @Override
                            public <V> V getValue(Class<V> type, String columnLabel) throws Exception {
                                return type.cast(rs.getObject(columnLabel));
                            }
                        };
                        process_row(row_data, rowHandler, res); // 1st row is already fetched by rs.next()
                        while (rs.next()) { // fetch the rest
                            process_row(row_data, rowHandler, res);
                        }
                    }
                    return null;
                }
            };
            query(sql, rsh, params);
            return res;
        }

        private <T> void query(String sql, ResultSetHandler<T> rsh, Object... params) throws SQLException {
            MyQueryRunner query_runner = new MyQueryRunner();
            prepare_params(params);
            boolean sp = is_jdbc_stored_proc_call(sql);
            if (sp) {
                query_runner.query_call(conn, sql, rsh, params);
            } else {
                query_runner.query(conn, sql, rsh, params);
            }
        }
    }
}