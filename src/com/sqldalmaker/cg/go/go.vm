## Go ===================================================================================
#macro(list_item_base $index $value $separator)
#if( $index == 1 )${value}#else${separator}${value}#end
#end
#macro(list_item $index $value)
#list_item_base($index $value ", ")
#end
#macro(list_item_str $index $value)
#if( $index == 1 )"${value}"#else, "${value}"#end
#end
#macro(param_decls $external_sql $params)
#if ($external_sql == true), sql string#end
#foreach($param in ${params})
, ${param.getLowerCamelCaseName()} ${param.getType()}#end
#end
#macro(param_decls_dto $external_sql)
#if($external_sql == true), sql string#end, #end
#macro(sql_var $is_external_sql $sql)
#if (!${is_external_sql})
	sql := ${sql}
#end
#end
#macro(set_field $f)
#if (${f.getAssignFunc()} == "")
SetAny(&item.${f.getName()}, row, "${f.getColumnName()}", errMap)
#else
${f.getAssignFunc()}(&item.${f.getName()}, row, "${f.getColumnName()}", errMap)
#end
#end
## ======================================================================================
#if ($mode=="dto_class")
package ${package}

// Code generated by a tool. DO NOT EDIT.
// Additional custom methods can be implemented in a separate file like <this_file>_ex.go.
// https://sqldalmaker.sourceforge.net/

#if (${imports.size()} > 0)
import (
#foreach ($imp in ${imports})
	"${imp}"
#end
)

#end
#if($header)
$header
#end
type ${class_name} struct {
#foreach ($f in ${fields})
	${f.getName()} ${f.getType()}
#end
}
## ======================================================================================
#elseif ($mode=="dao_class")
package ${package}

// Code generated by a tool. DO NOT EDIT.
// Additional custom methods can be implemented in a separate file like <this_file>_ex.go.
// https://sqldalmaker.sourceforge.net/

import (
	"context"
#foreach($imp in ${imports})
	"${imp}"
#end
)

type ${class_name} struct {
	ds DataStore
}
#foreach($method in ${methods})${method}#end
## ======================================================================================
#elseif ($mode=="dao_create")

// (C)RUD: ${table_name}
// Generated/AI values are passed to DTO/model.

func (dao *${class_name}) ${method_name}(ctx context.Context, item *${dto_param}) error {
#if ($model == "gorm")
	return dao.ds.Create(ctx, "${table_name}", item)
}
#else
#sql_var(false $sql)
	row, err := dao.ds.Insert(ctx, sql, "${ai_names}"#foreach($param in ${params}), item.${param.getName()}#end)
	if err == nil {
#foreach ($ai in ${fields_ai})
		err = SetRes(&item.${ai.getName()}, row)
#end
	}
	return err
}
#end
## ======================================================================================
#elseif ($mode=="dao_query_all")

func (dao *${class_name}) ${method_name}(ctx context.Context#param_decls($is_external_sql $params)) (res []${returned_type_name}, err error) {
#sql_var($is_external_sql $sql)
	errMap := make(map[string]int)
	onRow := func(val interface{}) {
		var data ${returned_type_name}
		SetScalarValue(&data, val, errMap)
		res = append(res, data)
	}
	err = dao.ds.QueryAll(ctx, sql, onRow#foreach($param in ${params}), ${param.getLowerCamelCaseName()}#end)
	if err == nil {
		err = ErrMapToErr(errMap)
	}
	return
}
## ======================================================================================
#elseif ($mode=="dao_query")

func (dao *${class_name}) ${method_name}(ctx context.Context#param_decls($is_external_sql $params)) (res ${returned_type_name}, err error) {
#sql_var($is_external_sql $sql)
	err = dao.ds.Query(ctx, sql, &res#foreach($p in ${params}), ${p.getLowerCamelCaseName()}#end)
	return
}
## ======================================================================================
#elseif ($mode=="dao_query_all_dto")

#if ($method_type == "READ")
// C(R)UD: ${ref}

#end
func (dao *${class_name}) ${method_name}(ctx context.Context#param_decls($is_external_sql $params)) (res []*${returned_type_name}, err error) {
#if ($method_type == "READ" && $model == "gorm")
	err = dao.ds.ReadAll(ctx, "${table_name}", &res)
	return
}
#else## --------------------------------------------------------
#sql_var($is_external_sql $sql)
#if ($assign_mode == 0)## --------------------------------------------------------
	errMap := make(map[string]int)
	_onRow := func(row map[string]interface{}) {
		item := ${returned_type_name}{}
#foreach($f in ${fields})
		#set_field($f)
#end
		res = append(res, &item)
	}
	err = dao.ds.QueryAllRows(ctx, sql, _onRow#foreach($p in ${params}), ${p.getLowerCamelCaseName()}#end)
	if err == nil {
		err = ErrMapToErr(errMap)
	}
#elseif ($assign_mode == 1)
	_onRow := func() (interface{}, func()) {
		item := &${returned_type_name}{}
		return []interface{}{
#foreach ($f in ${fields})
				&item.${f.getName()},
#end
			}, func() {
				res = append(res, item)
			}
	}
	err = dao.ds.Select(ctx, sql, _onRow#foreach($param in ${params}), ${param.getLowerCamelCaseName()}#end)
#elseif ($assign_mode == 2)
	_onRow := func() (interface{}, func()) {
		item := &${returned_type_name}{}
		return item, func() {
			res = append(res, item)
		}
	}
	err = dao.ds.Select(ctx, sql, _onRow#foreach($param in ${params}), ${param.getLowerCamelCaseName()}#end)
#elseif ($assign_mode == 3)
	err = dao.ds.Select(ctx, sql, &res#foreach($param in ${params}), ${param.getLowerCamelCaseName()}#end)
#end
	return
}
#end## $method_type == "READ" && $model == "gorm"
### ======================================================================================
#elseif ($mode=="dao_query_dto")

#if ($method_type == "READ")
// C(R)UD: ${ref}

#end
#if ($method_type == "READ" && $model == "gorm")
func (dao *${class_name}) ${method_name}(ctx context.Context#param_decls($is_external_sql $params)) (*${returned_type_name}, error) {
	res := &${returned_type_name}{}
	err := dao.ds.Read(ctx, "${table_name}", res#foreach($param in ${params}), ${param.getLowerCamelCaseName()}#end)
	if err == nil {
		return res, nil
	}
	return nil, err
}
#else
func (dao *${class_name}) ${method_name}(ctx context.Context#param_decls($is_external_sql $params)) (*${returned_type_name}, error) {
#sql_var($is_external_sql $sql)
#if ($assign_mode == 0)
	row, err := dao.ds.QueryRow(ctx, sql#foreach($param in ${params}), ${param.getLowerCamelCaseName()}#end)
	if err != nil {
		return nil, err
	}
	item := ${returned_type_name}{}
	errMap := make(map[string]int)
#foreach ($f in ${fields})
	#set_field($f)
#end
	err = ErrMapToErr(errMap)
	return &item, err
#elseif ($assign_mode == 1)
	res := &${returned_type_name}{}
	_fa := []interface{}{
#foreach($f in ${fields})
		&res.${f.getName()},
#end
	}
	err := dao.ds.Select(ctx, sql, _fa#foreach($param in ${params}), ${param.getLowerCamelCaseName()}#end)
	if err == nil {
		return res, nil
	}
	return nil, err
#else
	res := &${returned_type_name}{}
	err := dao.ds.Select(ctx, sql, res#foreach($param in ${params}), ${param.getLowerCamelCaseName()}#end)
	if err == nil {
		return res, nil
	}
	return nil, err
#end
}
#end
## ======================================================================================
#elseif ($mode=="dao_exec_dml")

#if ($method_type == "CREATE")
// (C)RUD: ${table_name}

#elseif ($method_type == "UPDATE")
// CR(U)D: ${table_name}

#elseif ($method_type == "DELETE")
// CRU(D): ${table_name}

#end
#if (${dto_param} != "")
func (dao *${class_name}) ${method_name}(ctx context.Context#param_decls_dto($is_external_sql)item *${dto_param}) (rowsAffected int64, err error) {
#if ($model == "gorm")
#if ($method_type == "CREATE" || $method_type == "UPDATE")
	rowsAffected, err = dao.ds.Update(ctx, "${table_name}", item)
#elseif ( $method_type == "DELETE")
	rowsAffected, err = dao.ds.Delete(ctx, "${table_name}", item)
#else
	// ------------- invalid method_type
#end
#else
#sql_var($is_external_sql $sql)
	rowsAffected, err = dao.ds.Exec(ctx, sql#foreach($param in ${params}), item.${param.getName()}#end)
#end
	return
}
#else
func (dao *${class_name}) ${method_name}(ctx context.Context#param_decls($is_external_sql $params)) (rowsAffected int64, err error) {
#sql_var($is_external_sql $sql)
#if ($method_type == "CREATE" || $method_type == "UPDATE" || $method_type == "DELETE")
	rowsAffected, err = dao.ds.Exec(ctx, sql#foreach($param in ${params}), ${param.getLowerCamelCaseName()}#end)
#else
#if ($assign_mode == 0)
#if ($mappings.size()>0)
	errMap := make(map[string]int)
#end
#foreach ($m in $mappings)
	${m.get_exec_dml_param_name()} := func(row map[string]interface{}) {
		item := ${m.get_dto_class_name()}{}
#foreach ($f in ${m.get_fields()})
		#set_field($f)
#end
		${m.get_method_param_name()}(&item)
	}
#end
#else
#foreach ($m in $mappings)
	${m.get_exec_dml_param_name()} := func() (interface{}, func()) {
#if ($assign_mode == 1)
		item := ${m.get_dto_class_name()}{}
		return []interface{}{
#foreach($f in ${m.get_fields()})
				&item.${f.getName()},
#end
			}, func() {
				${m.get_method_param_name()}(&item)
			}
#else
		item := &${m.get_dto_class_name()}{}
		return item, func() {
			${m.get_method_param_name()}(item)
		}
#end
	}
#end
#end
	rowsAffected, err = dao.ds.Exec(ctx, sql#foreach($param in ${params2}), ${param.getLowerCamelCaseName()}#end)
#if($assign_mode == 0 && $mappings.size()>0)
	if err == nil {
		err = ErrMapToErr(errMap)
	}
#end
#end
	return
}
#end
#end