## Go ===============================================================================================================
#macro(list_item_base $index $value $separator)
#if( $index == 1 )${value}#else${separator}${value}#end
#end
#macro(list_item $index $value)
#list_item_base($index $value ", ")
#end
#macro(list_item_str $index $value)
#if( $index == 1 )"${value}"#else, "${value}"#end
#end
#macro(param_decls $external_sql $params)
#if ($external_sql == true)
sql string#if(${params.size()} > 0), #end
#end
#foreach($param in ${params})#if(${velocityCount} == 1)${param.getLowerCamelCaseName()} ${param.getType()}#else, ${param.getLowerCamelCaseName()} ${param.getType()}#end#end
#end
#macro(param_decls_dto $external_sql)
#if($external_sql == true)sql string, #end
#end
#macro(sql_var $is_external_sql $sql)
#if (!${is_external_sql})
	sql := ${sql}
#end
#end
## ====================================================================================================================
#if ($mode=="dto_class")
package ${package}

// This code was generated by a tool. Don't modify it manually.
// http://sqldalmaker.sourceforge.net

#if (${imports.size()} > 0)
import (
#foreach($imp in ${imports})
	"${imp}"
#end
)

#end
type ${class_name} struct {
#foreach($f in ${fields})
	${f.getName()} ${f.getType()}
#end
}
## ====================================================================================================================
#elseif($mode=="dao_class")
package ${package}

// This code was generated by a tool. Don't modify it manually.
// http://sqldalmaker.sourceforge.net

#if (${imports.size()} > 0)
import (
#foreach($imp in ${imports})
	"${imp}"
#end
)

#end
type ${class_name} struct {
	ds *DataStore
}
#foreach($method in ${methods})${method}#end
## ====================================================================================================================
#elseif($mode=="dao_create")

// (C)RUD: ${table_name}
// Generated values are passed to DTO.

func (dao *${class_name}) ${method_name}(p *${dto_param}) {
#sql_var(false $sql)
	res := dao.ds.insert(sql, "${ai_names}"#foreach($param in ${params}), p.${param.getName()}#end)
#foreach ($ai in ${fields_ai})
	dao.ds.assign(&p.${ai.getName()}, res)
#end
}
## ====================================================================================================================
#elseif($mode=="dao_query")

#if($crud)
// C(R)UD: ${ref}

#end
#if($fetch_list)
#if($use_dto)
func (dao *${class_name}) ${method_name}(#if(${dto_param} != "")#param_decls_dto($is_external_sql)${dto_param} p#else#param_decls($is_external_sql $params)#end) []*${returned_type_name} {
#sql_var($is_external_sql $sql)
	var res []*${returned_type_name}
	onDto := func(rd map[string]interface{}) {
		obj := ${returned_type_name}{}
#foreach($f in ${fields})
#set($i = ${velocityCount} - 1)
		dao.ds.assign(&obj.${f.getName()}, rd["${f.getColumnName()}"] /* ${f.getComment()} */)
#end
		res = append(res, &obj)
	}
	dao.ds.queryAllRows(sql, onDto#if(${dto_param} != "")#foreach($param in ${params}), p.${param.getterMethod()}()#end)#else#foreach($param in ${params}), ${param.getLowerCamelCaseName()}#end)
	return res
}
#end
#else
func (dao *${class_name}) ${method_name}(#if(${dto_param} != "")#param_decls_dto($is_external_sql)${dto_param} p#else#param_decls($is_external_sql $params)#end) []${returned_type_name} {
#sql_var($is_external_sql $sql)
	var res []${returned_type_name}
	onRow := func(rawData interface{}) {
		var data ${returned_type_name}
		dao.ds.assign(&data, rawData)
		res = append(res, data)
	}
#if(${dto_param} != "")
	dao.ds.queryAll(sql, onRow#foreach($param in ${params}), p.${param.getName()}#end)
#else
	dao.ds.queryAll(sql, onRow#foreach($param in ${params}), ${param.getLowerCamelCaseName()}#end)
#end
	return res
}
#end
#else
func (dao *${class_name}) ${method_name}(#if(${dto_param} != "")#param_decls_dto($is_external_sql)${dto_param} p#else#param_decls($is_external_sql $params)#end) ${returned_type_name} {
#sql_var($is_external_sql $sql)
#if($use_dto)
	rd := dao.ds.queryRow(sql#if(${dto_param} != "")#foreach($param in ${params}), p.${param.getterMethod()}()#end)#else#foreach($param in ${params}), ${param.getLowerCamelCaseName()}#end)
	obj := ${returned_type_name}{}
#foreach($f in ${fields})
#set($i = ${velocityCount} - 1)
	dao.ds.assign(&obj.${f.getName()}, rd["${f.getColumnName()}"] /* ${f.getComment()} */)
#end
	return obj
#end
#else
#if(${dto_param} != "")
	r := dao.ds.query(sql#foreach($param in ${params}), p.${param.getterMethod()}()#end)
#else
	r := dao.ds.query(sql#foreach($param in ${params}), ${param.getLowerCamelCaseName()}#end)
#end
	var res ${returned_type_name}
	dao.ds.assign(&res, r)
	return res
#end
}
#end
## ====================================================================================================================
#elseif($mode=="dao_exec_dml")
#if(${dto_param} != "")

#if($method_type == "CREATE")
// (C)RUD: ${table_name}
#elseif($method_type == "UPDATE")
// CR(U)D: ${table_name}
#elseif($method_type == "DELETE")
// CRU(D): ${table_name}
#end
// Returns the number of affected rows or -1 on error.

func (dao *${class_name}) ${method_name}(#param_decls_dto($is_external_sql)p *${dto_param}) int64 {
#sql_var($is_external_sql $sql)
	return dao.ds.execDML(sql#foreach($param in ${params}), p.${param.getName()}#end)
}
#end
#if($plain_params)

#if($method_type == "CREATE")
// (C)RUD: ${table_name}
#elseif($method_type == "UPDATE")
// CR(U)D: ${table_name}
#elseif($method_type == "DELETE")
// CRU(D): ${table_name}
#end
// Returns the number of affected rows or -1 on error.

func (dao *${class_name}) ${method_name}(#param_decls($is_external_sql $params)) int64 {
#sql_var($is_external_sql $sql)
#foreach($m in ${mappings})
	${m.get_exec_dml_param_name()} := func(rd map[string]interface{}) {
		obj := ${m.get_dto_class_name()}{};
#foreach($f in ${m.get_fields()})
		dao.ds.assign(&obj.${f.getName()}, rd["${f.getColumnName()}"] /* ${f.getComment()} */)
#end
		${m.get_method_param_name()}(&obj)
	}
#end
#if ($method_type == "CREATE" || $method_type == "UPDATE" || $method_type == "DELETE")
	return dao.ds.execDML(sql#foreach($param in ${params}), ${param.getLowerCamelCaseName()}#end)
#else
	return dao.ds.execDML(sql#foreach($param in ${params2}), ${param.getLowerCamelCaseName()}#end)
#end
}
#end
#end