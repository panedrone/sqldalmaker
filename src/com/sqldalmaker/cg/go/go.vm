## Java ===============================================================================================================
#macro(list_item_base $index $value $separator)
#if( $index == 1 )${value}#else${separator}${value}#end
#end
#macro(list_item $index $value)
#list_item_base($index $value ", ")
#end
#macro(list_item_str $index $value)
#if( $index == 1 )"${value}"#else, "${value}"#end
#end
#macro(param_decls $external_sql $params)
#if ($external_sql == true)
String sql#if(${params.size()} > 0), #end
#end
#foreach($param in ${params})#if(${velocityCount} == 1)${param.getName()} ${param.getType()}#else, ${param.getName()} ${param.getType()}#end#end
#end
#macro(param_decls_dto $external_sql)
#if($external_sql == true)String sql, #end
#end
#macro(sql_var $is_external_sql $sql)
#if (!${is_external_sql})
    sql := ${sql}
#end
#end
## ====================================================================================================================
#if ($mode=="dto_class")
package ${package}

// The code generated by a tool. Don't modify it manually.
// http://sqldalmaker.sourceforge.net

type ${class_name} struct {
#foreach($f in ${fields})
    ${f.getName()} ${f.getType()}
#end
}
## ====================================================================================================================
#elseif($mode=="dao_class")
package ${package}

// The code generated by a tool. Don't modify it manually.
// http://sqldalmaker.sourceforge.net

type ${class_name} struct {
    ds *DataStore
}
#foreach($method in ${methods})${method}#end
## ====================================================================================================================
#elseif($mode=="dao_create")

// (C)RUD: ${table_name}
// Generated values are passed to DTO.
// Returns the number of affected rows or -1 on error.

func (dao *${class_name}) ${method_name}(p *${dto_param}) {
#sql_var(false $sql)
    res := dao.ds.insert(sql#foreach($param in ${params}), p.${param.getName()}#end)
#foreach ($key in ${keys})
#set($i = ${velocityCount} - 1)
    p.${key.getName()} = res
#end
}
## ====================================================================================================================
#elseif($mode=="dao_query")

#if($crud)
// C(R)UD: ${ref}

#end
#if($fetch_list)
func (dao *${class_name}) ${method_name}(#if(${dto_param} != "")#param_decls_dto($is_external_sql)${dto_param} p#else#param_decls($is_external_sql $params)#end) []${returned_type_name} {
#sql_var($is_external_sql $sql)
#if($use_dto)
    var res []${returned_type_name}
    onDto := func(rd map[string]interface{}) {
        obj := ${returned_type_name}{}
#foreach($f in ${fields})
#set($i = ${velocityCount} - 1)
        obj.${f.getName()} = rd["${f.getColumnName()}"].(${f.getType()})
#end
        res = append(res, obj)
    }
    dao.ds.queryAllRows(sql, onDto#if(${dto_param} != "")#foreach($param in ${params}), p.${param.getterMethod()}()#end);#else#foreach($param in ${params}), ${param.getName()}#end)
    return res
#end
#else
#if(${dto_param} != "")    
    return dao.ds.queryList(${returned_type_name}.class, sql#foreach($param in ${params}), p.${param.getName()}#end)
#else
    return dao.ds.queryList(${returned_type_name}.class, sql#foreach($param in ${params}), ${param.getName()}#end)
#end
#end
}
#else
func (dao *${class_name}) ${method_name}(#if(${dto_param} != "")#param_decls_dto($is_external_sql)${dto_param} p#else#param_decls($is_external_sql $params)#end) ${returned_type_name} {
#sql_var($is_external_sql $sql)
#if($use_dto)
    rd := dao.ds.queryRow(sql#if(${dto_param} != "")#foreach($param in ${params}), p.${param.getterMethod()}()#end);#else#foreach($param in ${params}), ${param.getName()}#end)
    obj := ${returned_type_name}{}
#foreach($f in ${fields})
#set($i = ${velocityCount} - 1)
    obj.${f.getName()} = rd["${f.getColumnName()}"].(${f.getType()})
#end
    return obj
#end
#else
#if(${dto_param} != "")    
    return dao.ds.query(sql#foreach($param in ${params}), p.${param.getterMethod()}()#end).(${returned_type_name})
#else
    return dao.ds.query(sql#foreach($param in ${params}), ${param.getName()}#end).(${returned_type_name})
#end    
#end
}
#end
## ====================================================================================================================
#elseif($mode=="dao_exec_dml")
#if(${dto_param} != "")

#if($method_type == "CREATE")
// (C)RUD: ${table_name}
#elseif($method_type == "UPDATE")
// CR(U)D: ${table_name}
#elseif($method_type == "DELETE")
// CRU(D): ${table_name}
#end
// Returns the number of affected rows or -1 on error.

func (dao *${class_name}) ${method_name}(#param_decls_dto($is_external_sql)p *${dto_param}) int64 {
#sql_var($is_external_sql $sql)
    return dao.ds.execDML(sql#foreach($param in ${params}), p.${param.getName()}#end)
}
#end
#end