#set ( $d = "$")
## PHP ==================================================================================================================
#macro(list_item_base $index $value $separator)
#if( $index == 1 )${value}#else${separator}${value}#end
#end
#macro(list_item $index $value)
#list_item_base($index $value ", ")
#end
#macro(list_item_str $index $value)
#if( $index == 1 )"${value}"#else, "${value}"#end
#end
#macro(param_decls $external_sql $params)
#if ($external_sql == true)${d}sql#if(${params.size()} > 0),#end#end
#foreach($param in ${params})#if(${velocityCount} == 1)${d}${param.getName()}#else, ${d}${param.getName()}#end#end
#end
#macro(param_decls_dto $external_sql)
#if($external_sql == true)${d}sql, #end
#end
#macro(param_array $dto_param)
#if ($dto_param != "")
array(#foreach ($param in ${params})#set($p=${d}+"p->"+$param.getterMethod()+"()")#list_item(${velocityCount} $p)#end)#else
array(#foreach ($param in ${params})#set($p=${d}+$param.getName())#list_item(${velocityCount} $p)#end)#end
#end
#macro(param_array2 $dto_param)
#if ($dto_param != "")
array(#foreach ($param in ${params2})#set($p=${d}+"p->"+$param.getterMethod()+"()")#list_item(${velocityCount} $p)#end)#else
array(#foreach ($param in ${params2})#set($p=$param.getName())#list_item(${velocityCount} $p)#end)#end
#end
#macro(sql_var $is_external_sql $sql)
#if(!${is_external_sql})
        ${d}sql = "${sql}";
#end
#end
## ====================================================================================================================
#if ($mode=="dto_class")
<?php
#if (${namespace} != "")
namespace ${namespace};
#end
/**
 * ${class_name} is a generated DTO class. Don't modify it manually.
 * http://sqldalmaker.sourceforge.net
 */
class ${class_name} {

#foreach($f in ${fields})
    private ${d}${f.getName()}; // ${f.getType()} ${f.getComment()}
#end
#foreach($f in ${fields})

    /**
     * @return ($f.getType())
     */
    public function ${f.getterMethod()}() {
        return ${d}this->$f.getName();
    }

    /**
     * @param ($f.getType()) ${d}$f.getName()
     */
    public function ${f.setterMethod()}(${d}$f.getName()) {
        ${d}this->$f.getName() = ${d}$f.getName();
    }
#end
}## ====================================================================================================================
#elseif($mode=="dao_class")
<?php
#if (${dao_namespace} != "")
namespace ${dao_namespace};
#end

include_once 'DataStore.php';

#if (${imports.size()} > 0)
#foreach($imp in ${imports})
include_once '${imp}.php';
#end

#end
#if (${uses.size()} > 0)
#foreach($u in ${uses})
use ${u};
#end

#end
/**
 * ${class_name} is a generated DAO class. Don't modify it manually.
 * http://sqldalmaker.sourceforge.net
 */
class ${class_name} {

    protected ${d}ds;

    public function __construct(\DataStore $ds) {
        ${d}this->ds = ${d}ds;
    }
#foreach($method in ${methods})${method}#end

}
## ====================================================================================================================
#elseif($mode=="dao_create")

    /**
     * (C)RUD: ${table_name}
     * Generated values are passed to DTO.
     * @param ${dto_param} ${d}p
     * @return TRUE on success or FALSE on failure
     */
    public function ${method_name}(${dto_param} ${d}p) {
#sql_var(false $sql)
        ${d}ai_values = array(#foreach ($key in ${keys})#set($p='"'+${key.getColumnName()}+'"'+" => null")#list_item(${velocityCount} $p)#end);
        ${d}res = ${d}this->ds->insert(${d}sql, #param_array($dto_param), ${d}ai_values);
#foreach ($key in ${keys})
#set($i = ${velocityCount})
        ${d}p->${key.setterMethod()}(${d}ai_values["$key.getName()"]);
#end
        return ${d}res;
    }
## ====================================================================================================================
#elseif($mode=="dao_query")

    /**
#if($crud)
     * C(R)UD: ${ref}
#end
#if(${is_external_sql})
     * @param string ${d}sql external SQL statement
#end
#if(${dto_param} != "")
     * @param ${dto_param} ${d}p
#else
#foreach($param in ${params})
     * @param (${param.getType()}) ${d}${param.getName()}
#end
#end
#if($fetch_list)
#if($use_dto)
     * @return ${returned_type_name}[] or FALSE on failure
#else
     * @return array of (${returned_type_name}) ${fields.get(0).getColumnName()}
#end
#else
#if($use_dto)
     * @return ${returned_type_name} or FALSE on failure
#else
     * @return mixed: (${returned_type_name}) ${fields.get(0).getColumnName()} or FALSE on failure
#end
#end
     */
#if($fetch_list)
    public function ${method_name}(#if(${dto_param} != "")#param_decls_dto($is_external_sql)${dto_param} ${d}p#else#param_decls($is_external_sql $params)#end) {
#sql_var(${is_external_sql} $sql)
#if($use_dto)
        ${d}res = array();
        ${d}_map_cb = function(${d}row) use(&${d}res) {
            ${d}obj = new ${returned_type_name}();
#foreach($f in ${fields})
            ${d}obj->${f.setterMethod()}(${d}row["${f.getColumnName()}"]); // ${f.getComment()}
#end
            array_push(${d}res, ${d}obj);
        };
        ${d}this->ds->queryDtoList(${d}sql, #param_array($dto_param), ${d}_map_cb);
        return ${d}res;
#else
        return ${d}this->ds->queryList(${d}sql, #param_array($dto_param));
#end
    }
#else
    public function ${method_name}(#if(${dto_param} != "")#param_decls_dto($is_external_sql)${dto_param} ${d}p#else#param_decls($is_external_sql $params)#end) {
#sql_var(${is_external_sql} $sql)
#if($use_dto)
        ${d}row = ${d}this->ds->queryDto(${d}sql, #param_array($dto_param));
        if ($row) {
            ${d}obj = new ${returned_type_name}();
#foreach($f in ${fields})
            ${d}obj->${f.setterMethod()}(${d}row["${f.getColumnName()}"]); // ${f.getComment()}
#end
            return $obj;
        }
        return FALSE;
#else
        return ${d}this->ds->query(${d}sql, #param_array($dto_param));
#end
    }
#end
## ====================================================================================================================
#elseif($mode=="dao_exec_dml")

    /**
#if ($crud == "create")
     * (C)RUD: ${table_name}
#elseif ($crud == "update")
     * CR(U)D: ${table_name}
#elseif ($crud == "delete")
     * CRU(D): ${table_name}
#end
#if(${is_external_sql})
     * @param string ${d}sql external SQL statement
#end
#if(${dto_param} != "")
     * @param ${dto_param} ${d}p
#else
#foreach($param in ${params})
     * @param (${param.getType()}) ${d}${param.getName()}
#end
#end
     * @return TRUE on success or FALSE on failure
     */
    public function ${method_name}(#if(${dto_param} != "")#param_decls_dto($is_external_sql)${dto_param} ${d}p#else#param_decls($is_external_sql $params)#end) {
#sql_var(${is_external_sql} $sql)
#foreach($m in ${mappings})
        ${m.get_exec_dml_param_name()} = function(${d}row) use(&${d}${m.get_method_param_name()}) {
            ${d}obj = new ${m.get_dto_class_name()}();
#foreach($f in ${m.get_fields()})
            ${d}obj->${f.setterMethod()}(${d}row["${f.getColumnName()}"]); // ${f.getComment()}
#end
            ${d}${m.get_method_param_name()}(${d}obj);
        };
#end
#if ($crud == "create" || $crud == "update" || $crud == "delete")
        return ${d}this->ds->execDML(${d}sql, #param_array($dto_param));
#else
        return ${d}this->ds->execDML(${d}sql, #param_array2($dto_param));
#end
    }
#end