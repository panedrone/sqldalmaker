#set ( $d = "$")
## PHP ==================================================================================================================
#macro(list_item_base $index $value $separator)
#if( $index == 1 )${value}#else${separator}${value}#end
#end
#macro(list_item $index $value)
#list_item_base($index $value ", ")
#end
#macro(list_item_str $index $value)
#if( $index == 1 )"${value}"#else, "${value}"#end
#end
#macro(param_decls $external_sql $params)
#if ($external_sql == true)${d}sql#if(${params.size()} > 0),#end#end
#foreach($param in ${params})#if(${velocityCount} == 1)${d}${param.getName()}#else, ${d}${param.getName()}#end#end
#end
#macro(param_decls_dto $external_sql)
#if($external_sql == true)${d}sql, #end
#end
#macro(param_array $dto_param)
#if ($dto_param != "")
array(#foreach ($param in ${params})#set($p=${d}+"p->"+$param.getterMethod()+"()")#list_item(${velocityCount} $p)#end)#else
array(#foreach ($param in ${params})#set($p=${d}+$param.getName())#list_item(${velocityCount} $p)#end)#end
#end
#macro(param_array2 $dto_param)
#if ($dto_param != "")
array(#foreach ($param in ${params2})#set($p=${d}+"p->"+$param.getterMethod()+"()")#list_item(${velocityCount} $p)#end)#else
array(#foreach ($param in ${params2})#set($p=$param.getName())#list_item(${velocityCount} $p)#end)#end
#end
#macro(sql_var $is_external_sql $sql)
#if(!${is_external_sql})
        ${d}sql = ${sql};
#end
#end
#macro(pk_array $params)
array(#foreach($p in $params)#if($velocityCount>1), #end"$p.getName()" => ${d}$p.getName()#end)#end
## ====================================================================================================================
#if ($mode=="dto_class")
<?php

// Code generated by a tool. DO NOT EDIT.
// https://sqldalmaker.sourceforge.net/

#if (${namespace} != "")
namespace ${namespace};
#end

#if ($model=="doctrine")
use Doctrine\ORM\Mapping as ORM;

#if($header)
$header
#end
/**
 * @ORM\Entity
#if ($table)
 * @ORM\Table(name="$table")
#end
 */
#end
class ${class_name}
{
#foreach($f in ${fields})
    /**
#if ($model=="doctrine")
     * $f.getType()
#else
     * @var $f.getType()
#end
     */
    private ${d}${f.getName()};
#end
#foreach($f in ${fields})

    public function ${f.getterMethod()}()
    {
        return ${d}this->$f.getName();
    }

    public function ${f.setterMethod()}(${d}value)
    {
        ${d}this->$f.getName() = ${d}value;
    }
#end
}
## ================================================================================================
#elseif($mode=="dao_class")
<?php

// Code generated by a tool. DO NOT EDIT.
// https://sqldalmaker.sourceforge.net/

#if (${dao_namespace} != "")
namespace ${dao_namespace};
#end

#if (${imports.size()} > 0)
#foreach($imp in ${imports})
include_once __DIR__ . '/${imp}.php';
#end

#end
#if (${uses.size()} > 0)
#foreach($u in ${uses})
use ${u};
#end

#end
class ${class_name}
{
    /**
     * @var \DataStore
     */
    protected ${d}ds;

    public function __construct($ds)
    {
        ${d}this->ds = ${d}ds;
    }
#foreach($method in ${methods})${method}#end
}
## =================================================================================================
#elseif($mode=="dao_create")

    /**
     * (C)RUD: ${table_name}
     * Generated/AI values are passed to ${d}p param
     * @param ${dto_param} ${d}p
     * @return true/false on success/failure
     * @throws Exception
     */
#if ($crud &&  $model != "")
    public function ${method_name}(${d}p)
    {
        ${d}this->ds->create(${d}p);
    }
#else
    public function ${method_name}(${d}p)
    {
#sql_var(false $sql)
        ${d}ai_values = array(#foreach ($key in ${keys})#set($p='"'+${key.getColumnName()}+'"'+" => 0")#list_item(${velocityCount} $p)#end);
        ${d}res = ${d}this->ds->insert(${d}sql, #param_array($dto_param), ${d}ai_values);
        if (${d}res) {
#foreach ($key in ${keys})
#set($i = ${velocityCount})
            ${d}p->${key.setterMethod()}(${d}ai_values["$key.getColumnName()"]);
        }
        return ${d}res;
#end
    }
#end
## ==================================================================================================
#elseif($mode=="dao_query")

    /**
#if($crud)
     * C(R)UD: ${ref}
#end
#if(${is_external_sql})
     * @param String ${d}sql external SQL statement
#end
#if(${dto_param} != "")
     * @param ${dto_param} ${d}p
#else
#foreach($param in ${params})
     * @param ${param.getType()} ${d}${param.getName()}
#end
#end
#if($fetch_list)
#if($use_dto)
     * @return ${returned_type_name}[]
#else
     * @return array of ${returned_type_name} ${fields.get(0).getColumnName()}
#end
#else
#if($use_dto)
     * @return ${returned_type_name}|FALSE on failure
#else
     * @return mixed ${returned_type_name} ${fields.get(0).getColumnName()} or FALSE on failure
#end
#end
     * @throws Exception
     */
#if($fetch_list)
#if ($crud &&  $model != "")
    public function ${method_name}()
    {
        return ${d}this->ds->readAll(${returned_type_name}::class);
    }
#else
#if(${dto_param} != "")
    public function ${method_name}(#param_decls_dto($is_external_sql)${dto_param} ${d}p)
#else
    public function ${method_name}(#param_decls($is_external_sql $params))
#end
    {
#sql_var(${is_external_sql} $sql)
#if($use_dto)
        ${d}res = array();
        ${d}_map_cb = function (${d}row) use (&${d}res) {
            ${d}obj = new ${returned_type_name}();
#foreach($f in ${fields})
            ${d}obj->${f.setterMethod()}(${d}row["${f.getColumnName()}"]); // ${f.getComment()}
#end
            array_push(${d}res, ${d}obj);
        };
        ${d}this->ds->queryRowList(${d}sql, #param_array($dto_param), ${d}_map_cb);
        return ${d}res;
#else
        return ${d}this->ds->queryList(${d}sql, #param_array($dto_param));
#end
    }
#end
#else
#if ($crud &&  $model != "")
    public function ${method_name}(#param_decls(false $params))
    {
        return ${d}this->ds->read(${returned_type_name}::class, #pk_array($params));
    }
#else
#if(${dto_param} != "")
    public function ${method_name}(#param_decls_dto($is_external_sql)${dto_param} ${d}p)
#else
    public function ${method_name}(#param_decls($is_external_sql $params))
#end
    {
#sql_var(${is_external_sql} $sql)
#if($use_dto)
        ${d}row = ${d}this->ds->queryRow(${d}sql, #param_array($dto_param));
        if ($row) {
            ${d}obj = new ${returned_type_name}();
#foreach($f in ${fields})
            ${d}obj->${f.setterMethod()}(${d}row["${f.getColumnName()}"]); // ${f.getComment()}
#end
            return $obj;
        }
        return FALSE;
#else
        return ${d}this->ds->query(${d}sql, #param_array($dto_param));
#end
    }
#end
#end
## ================================================================================================
#elseif($mode=="dao_exec_dml")

    /**
#if ($method_type == "CREATE")
     * (C)RUD: ${table_name}
#elseif ($method_type == "UPDATE")
     * CR(U)D: ${table_name}
#elseif ($method_type == "DELETE")
     * CRU(D): ${table_name}
#end
#if (${is_external_sql})
     * @param String ${d}sql external SQL statement
#end
#if (${dto_param} != "" && $method_type != "DELETE")
     * @param ${dto_param} ${d}p
#else
#foreach($param in ${params})
     * @param ${param.getType()} ${d}${param.getName()}
#end
#end
#if (!$crud)
     * @return int the affected rows count
#end
     * @throws Exception
     */
#if(${dto_param} == "" ||  $method_type == "DELETE")
    public function ${method_name}(#param_decls($is_external_sql $params))
#else
    public function ${method_name}(#param_decls_dto($is_external_sql)${d}p)
#end
    {
#if ($crud &&  $model != "")
#if ($method_type == "CREATE" || $method_type == "UPDATE")
        return ${d}this->ds->update(${d}p);
#elseif ( $method_type == "DELETE")
        return ${d}this->ds->delete(${dto_param}::class, #pk_array($params));
#else
        // ------------- invalid method_type
#end
    }
#else
#sql_var(${is_external_sql} $sql)
#foreach($m in ${mappings})
        ${m.get_exec_dml_param_name()} = function (${d}row) use (&${d}${m.get_method_param_name()}) {
            ${d}obj = new ${m.get_dto_class_name()}();
#foreach($f in ${m.get_fields()})
            ${d}obj->${f.setterMethod()}(${d}row["${f.getColumnName()}"]); // ${f.getComment()}
#end
            ${d}${m.get_method_param_name()}(${d}obj);
        };
#end
#if ($method_type == "CREATE" || $method_type == "UPDATE" || $method_type == "DELETE")
        return ${d}this->ds->execDML(${d}sql, #param_array($dto_param));
#else
        return ${d}this->ds->execDML(${d}sql, #param_array2($dto_param));
#end
    }
#end
#end