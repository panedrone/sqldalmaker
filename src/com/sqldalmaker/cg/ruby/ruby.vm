## Ruby== =============================================================================================================
#macro(list_item_base $index $value $separator)
#if( $index == 1 )$value#else$separator$value#end
#end
#macro(list_item $index $value)
#list_item_base($index $value ", ")
#end
#macro(list_item_str $index $value)
#if( $index == 1 )"$value"#else, "$value"#end
#end
#macro(param_decls $external_sql $params)
#if ($external_sql == true)sql#if(${params.size()} > 0), #end    #end
#foreach($param in ${params})#if(${velocityCount} == 1)${param.getName()}#else, ${param.getName()}#end#end
#end
#macro(param_decls_dto $external_sql)
#if($external_sql)sql, #end#end
#macro(param_array $dto_param $params)
#if ($dto_param != "")
    params = [#foreach ($param in $params)#set($p="p."+$param.getName())#list_item($velocityCount $p)#end]#else
    params = [#foreach ($param in $params)#set($p=$param.getName())#list_item($velocityCount $p)#end]#end
#end
#macro(sql_var $is_external_sql $sql)
#if (!${is_external_sql})
    sql = %q[$sql]
#end
#end
## ====================================================================================================================
#if ($mode=="dto_class")
# This is a generated DTO class. Don't modify it manually.
# http://sqldalmaker.sourceforge.net

class $class_name

#foreach($field in $fields)
  # @return [$field.getType()]
  def $field.getName()
    @$field.getName()
  end

  # @param [$field.getType()]
  def $field.getName()=(value)
    @$field.getName() = value
  end

#end
end
## ====================================================================================================================
#elseif($mode=="dao_class")
# This is a generated DAO class. Don't modify it manually.
# http://sqldalmaker.sourceforge.net

#foreach($imp in $imports)
require_relative './${imp}'
#end

class $class_name

  def initialize(ds)
    @ds = ds
  end
#foreach($method in $methods)$method#end

end
## ====================================================================================================================
#elseif($mode=="dao_create")

  # (C)RUD::$table_name
  # Generated values are passed to DTO.
  # @param [$dto_param] p
  def $method_name(p)
#sql_var(false $sql)
    params = [#foreach ($param in $params)#set($p="p."+${param.getName()})#list_item($velocityCount $p)#end]
    ai_values = [#foreach ($key in $keys)#set($p="['"+${key.getColumnName()} +"', nil]")#list_item($velocityCount $p)#end]
    @ds.insert_row(sql, ai_values, params)
#foreach ($key in $keys)
#set($i = $velocityCount - 1)
    p.$key.getName() = ai_values[$i][1]
#end
  end
## ====================================================================================================================
#elseif($mode=="dao_query")

#if($fetch_list)
#if($crud)
  # C(R)UD::$ref
#end
#if($is_external_sql)
  # @param [String] sql
#end
#if($dto_param != "")
  # @param [$dto_param] p
#else
#foreach($param in $params)
  # @param [$param.getType()] $param.getName()
#end
#end
  # @return [${returned_type_name}[]]
  def $method_name(#if($dto_param != "")#param_decls_dto($is_external_sql)p#else#param_decls($is_external_sql $params)#end)
#sql_var($is_external_sql $sql)
#param_array($dto_param $params)
#if($use_dto)
    res = []
    @ds.query_all_rows(sql, params) { |row|
      obj = ${returned_type_name}.new
#foreach($field in ${fields})
      obj.${field.getName()} = row['${field.getColumnName()}']
#end
      res << obj
    }
    res
#else
    @ds.query_all_scalar_values(sql, params)
#end
  end
#else
#if($crud)
  # C(R)UD::$ref
#end
#if($is_external_sql)
  # @param [String] sql
#end
#if($dto_param != "")
  # @param [$dto_param] p
#else
#foreach($param in $params)
  # @param [$param.getType()] $param.getName()
#end
#end
#if($use_dto)
  # @param [$returned_type_name] obj
  # @return true on success or false on failure
#else
  # @return [$returned_type_name]
#end
  def $method_name(#if($dto_param != "")#param_decls_dto($is_external_sql)p, obj#else#param_decls($is_external_sql $params)#if($use_dto), obj#end#end)
#sql_var($is_external_sql $sql)
#param_array($dto_param $params)
#if($use_dto)
    row = @ds.query_first_row(sql, params)
    if row.nil?
      return false
    end
#foreach($field in ${fields})
    obj.${field.getName()} = row['${field.getColumnName()}']
#end
    true
#else
    @ds.query_scalar_value(sql, params)
#end
  end
#end
## ====================================================================================================================
#elseif($mode=="dao_exec_dml")

#if ($crud == "create")
  # (C)RUD::$table_name
#elseif ($crud == "update")
  # CR(U)D::$table_name
#elseif ($crud == "delete")
  # CRU(D)::$table_name
#end
#if ($is_external_sql)
  # @param [String] sql
#end
#if ($dto_param != "")
  # @param [$dto_param] p
#else
#foreach($param in $params)
  # @param [$param.getType()] $param.getName()
#end
#end
  def $method_name(#if($dto_param != "")#param_decls_dto($is_external_sql)p#else#param_decls($is_external_sql $params)#end)
#sql_var($is_external_sql $sql)
#param_array($dto_param $params)
    @ds.exec_dml(sql, params)
  end
#end