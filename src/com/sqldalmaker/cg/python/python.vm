## Python =============================================================================================================
#macro(list_item_base $index $value $separator)
#if( $index == 1 )$value#else$separator$value#end
#end
#macro(list_item $index $value)
#list_item_base($index $value ", ")
#end
#macro(list_item_str $index $value)
#if( $index == 1 )"$value"#else, "$value"#end
#end
#macro(param_decls $external_sql $params)
self#if($external_sql), sql#end#foreach($param in ${params}), ${param.getName()}#end
#end
#macro(param_decls_dto $external_sql)
self#if($external_sql), sql#end, #end
#macro(param_array $dto_param)
#if ($dto_param != "")
[#foreach ($param in $params)#set($p="p."+$param.getName())#list_item($velocityCount $p)#end]#else
[#foreach ($param in $params)#set($p=$param.getName())#list_item($velocityCount $p)#end]#end
#end
#macro(param_array2 $dto_param)
#if ($dto_param != "")
[#foreach ($param in $params2)#set($p="p."+$param.getName())#list_item($velocityCount $p)#end]#else
[#foreach ($param in $params2)#set($p=$param.getName())#list_item($velocityCount $p)#end]#end
#end
#macro(sql_var $is_external_sql $sql)
#if (!${is_external_sql})
        sql = """$sql"""
#end
#end
#macro (params_dict $params)
{#foreach ($param in $params)#if($velocityCount != 1), #end'$param.getName()': $param.getName()#end}#end
## ====================================================================================================================
#if ($mode=="dto_class")
"""
Code generated by a tool. DO NOT EDIT.
https://sqldalmaker.sourceforge.net/
"""

#if ($model=="sqlalchemy" || $model=="sa")
from .data_store import *


class $class_name(Base):
#if($tablename)
    __tablename__ = '$tablename'

#else
    __abstract__ = True

#end
#foreach($f in $fields)
    $f.getName() $f.getType()
#end
#if($sql)

    SQL = """$sql"""
#end
#elseif ($model=="django" || $model=="dj")
from django.db import models


class $class_name(models.Model):
#foreach($f in $fields)
    $f.getName() $f.getType()
#end
#if($tablename)

    class Meta:
        managed = False
        db_table = '$tablename'
#else

    class Meta:
        managed = False
#end
#if($sql)

    SQL = """$sql"""
#end
#elseif (1 == 1)

class $class_name:
    """
#foreach($f in $fields)
    @type $f.getName(): $f.getType() | None
#end
    """

    def __init__(self):
#foreach($f in $fields)
        self.$f.getName() = None  # $f.getComment()
#end
#end
## ====================================================================================================================
#elseif($mode=="dao_class")
"""
Code generated by a tool. DO NOT EDIT.
https://sqldalmaker.sourceforge.net/
"""

#if (${imports.size()} > 0)
#foreach($imp in $imports)
from ${imp.getFileName()} import ${imp.getClassName()}
#end

#end

class $class_name:

    def __init__(self, ds):
        self.ds = ds
#foreach($method in $methods)$method#end
## ====================================================================================================================
#elseif($mode=="dao_create")

    def $method_name(self, p):
        """
        (C)RUD: $table_name
        Generated values are passed to DTO.
        :param p: $dto_param
        :return: None
        :raises Exception: if no rows inserted.
        """
#if ($model != "")
	    self.ds.create_one(p)
#else
#sql_var(false $sql)
        _ai_values = [#foreach ($key in $keys)#set($p='["'+${key.getColumnName()} +'", None]')#list_item($velocityCount $p)#end]
        self.ds.insert_row(sql, [#foreach ($param in $params)#set($p="p."+${param.getName()})#list_item($velocityCount $p)#end], _ai_values)
#foreach ($key in $keys)
#set($i = $velocityCount - 1)
        p.$key.getName() = _ai_values[$i][1]
#end
#end
## ====================================================================================================================
#elseif($mode=="dao_query")

#if($fetch_list)
    def $method_name(#if($dto_param != "")#param_decls_dto($is_external_sql)p#else#param_decls($is_external_sql $params)#end#if($out_params), out_params#end):
        """
#if($method_type == "READ")
        C(R)UD: $ref
#end
#if($is_external_sql)
        :param sql: str
#end
#if($dto_param != "")
        :param p: $dto_param
#else
#foreach($param in $params)
        :param $param.getName(): $param.getType()
#end
#if($out_params)
        :param out_params: OutParams
#end
#end
        :return: list[$returned_type_name]
        """
#if ($use_dto && $method_type == "READ" && $model != "")
	    return self.ds.read_all(${returned_type_name})
#else
#sql_var($is_external_sql $sql)
#if($use_dto)
        _res = []

        def _map_cb(row):
            _obj = ${returned_type_name}()
#foreach($f in ${fields})
            _obj.${f.getName()} = row["${f.getColumnName()}"]  # ${f.getComment()}
#end
            _res.append(_obj)

        self.ds.query_all_rows(sql, #param_array($dto_param), _map_cb#if($out_params), out_params#end)
        return _res
#else
        return self.ds.query_all_scalars(sql, #param_array($dto_param)#if($out_params), out_params#end)
#end
#end
#else
#if ($use_dto && $method_type == "READ" && $model != "")
    def $method_name(#param_decls($is_external_sql $params)):
#else
    def $method_name(#if($dto_param != "")#param_decls_dto($is_external_sql)p, obj#else#param_decls($is_external_sql $params)#if($use_dto), obj#end#end#if($out_params), out_params#end):
#end
        """
#if($method_type == "READ")
        C(R)UD: $ref
#end
#if($is_external_sql)
        :param sql: str
#end
#if($dto_param != "")
        :param p: $dto_param
#else
#foreach($param in $params)
        :param $param.getName(): $param.getType()
#end
#end
#if ($use_dto && $method_type == "READ" && $model != "")
        :return: $returned_type_name
#else
#if($use_dto)
        :param obj: $returned_type_name
#if($out_params)
        :param out_params: OutParams
#end
        :return: None
#else
#if($out_params)
        :param out_params: OutParams
#end
        :return: $returned_type_name
#end
#end
        :raises Exception: if amount of returned rows != 1.
        """
#if ($use_dto && $method_type == "READ" && $model != "")
	    return self.ds.read_one(${returned_type_name}, #params_dict($params))
#else
#sql_var($is_external_sql $sql)
#if($use_dto)
        row = self.ds.query_row(sql, #param_array($dto_param)#if($out_params), out_params#end)
#foreach($f in ${fields})
        obj.${f.getName()} = row["${f.getColumnName()}"]  # ${f.getComment()}
#end
#else
        return self.ds.query_scalar(sql, #param_array($dto_param)#if($out_params), out_params#end)
#end
#end
#end
## ====================================================================================================================
#elseif($mode=="dao_exec_dml")

    def $method_name(#if($dto_param != "")#param_decls_dto($is_external_sql)p#else#param_decls($is_external_sql $params)#end#if ($model != "" && $method_type == "UPDATE"), data#end):
        """
#if ($method_type == "CREATE")
        (C)RUD: $table_name
#elseif ($method_type == "UPDATE")
        CR(U)D: $table_name
#elseif ($method_type == "DELETE")
        CRU(D): $table_name
#end
#if ($is_external_sql)
        :param sql: str
#end
#if ($dto_param != "")
        :param p: $dto_param
#else
#foreach($param in $params)
        :param $param.getName(): $param.getType()
#end
#end
#if ($method_type == "UPDATE" && $model != "")
        :param data: dict of pairs column-value
#end
        :return: int (the number of affected rows)
        """
#if ($model != "")
#if ($method_type == "CREATE")
        self.ds.create_one(p)
#elseif ($method_type == "UPDATE")
        self.ds.update_one(${dto_class_name}, data, #params_dict($params))
#elseif ($method_type == "DELETE")
        return self.ds.delete_one(${dto_class_name}, #params_dict($params))
#else
        #  ------------- invalid method_type
#end
#else
#foreach($m in ${mappings})
        def ${m.get_exec_dml_param_name()}(row):
            _obj = ${m.get_dto_class_name()}()
#foreach($f in ${m.get_fields()})
            _obj.${f.getName()} = row["${f.getColumnName()}"]  # ${f.getComment()}
#end
            ${m.get_method_param_name()}(_obj)

#end
#sql_var($is_external_sql $sql)
#if ($method_type == "CREATE" || $method_type == "UPDATE" || $method_type == "DELETE")
        return self.ds.exec_dml(sql, #param_array($dto_param))
#else
        return self.ds.exec_dml(sql, #param_array2($dto_param))
#end
#end
#end