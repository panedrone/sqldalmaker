Index: src_intellij/com/sqldalmaker/intellij/ui/IdeaTargetLanguageHelpers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n    Copyright 2011-2022 sqldalmaker@gmail.com\r\n    SQL DAL Maker Website: http://sqldalmaker.sourceforge.net\r\n    Read LICENSE.txt in the root of this project/archive for details.\r\n */\r\npackage com.sqldalmaker.intellij.ui;\r\n\r\nimport com.intellij.openapi.fileTypes.ExactFileNameMatcher;\r\nimport com.intellij.openapi.fileTypes.FileType;\r\nimport com.intellij.openapi.fileTypes.FileTypeConsumer;\r\nimport com.intellij.openapi.project.Project;\r\nimport com.intellij.openapi.vfs.VirtualFile;\r\nimport com.sqldalmaker.cg.*;\r\nimport com.sqldalmaker.cg.cpp.CppCG;\r\nimport com.sqldalmaker.cg.go.GoCG;\r\nimport com.sqldalmaker.cg.java.JavaCG;\r\nimport com.sqldalmaker.cg.php.PhpCG;\r\nimport com.sqldalmaker.cg.python.PythonCG;\r\nimport com.sqldalmaker.cg.ruby.RubyCG;\r\nimport com.sqldalmaker.common.*;\r\nimport com.sqldalmaker.jaxb.dto.DtoClasses;\r\nimport com.sqldalmaker.jaxb.settings.Macros;\r\nimport com.sqldalmaker.jaxb.settings.Settings;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.sql.Connection;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * Created with IntelliJ IDEA.\r\n * User: sqldalmaker@gmail.com\r\n * Date: 21.06.12\r\n */\r\npublic class IdeaTargetLanguageHelpers {\r\n\r\n    public static List<VirtualFile> find_root_files(VirtualFile dir) {\r\n\r\n        List<VirtualFile> root_files = new ArrayList<VirtualFile>();\r\n        String[] rf_names = {RootFileName.PHP, RootFileName.JAVA, RootFileName.CPP, RootFileName.PYTHON, RootFileName.RUBY, RootFileName.GO};\r\n        for (String rf : rf_names) {\r\n            VirtualFile root_file;\r\n            root_file = dir.findFileByRelativePath(rf);\r\n            if (root_file != null) {\r\n                root_files.add(root_file);\r\n            }\r\n        }\r\n        return root_files;\r\n    }\r\n\r\n    public static boolean snake_case_needed(VirtualFile root_file) {\r\n        String fn = root_file.getName();\r\n        return TargetLangUtils.snake_case_needed(fn);\r\n    }\r\n\r\n    public static boolean lower_camel_case_needed(VirtualFile root_file) {\r\n        String fn = root_file.getName();\r\n        return TargetLangUtils.lower_camel_case_needed(fn);\r\n    }\r\n\r\n    public static void register(@NotNull FileTypeConsumer consumer,\r\n                                FileType file_type) {\r\n\r\n        consumer.consume(file_type, new ExactFileNameMatcher(RootFileName.JAVA));\r\n        consumer.consume(file_type, new ExactFileNameMatcher(RootFileName.CPP));\r\n        consumer.consume(file_type, new ExactFileNameMatcher(RootFileName.PHP));\r\n        consumer.consume(file_type, new ExactFileNameMatcher(RootFileName.PYTHON));\r\n        consumer.consume(file_type, new ExactFileNameMatcher(RootFileName.RUBY));\r\n        consumer.consume(file_type, new ExactFileNameMatcher(RootFileName.GO));\r\n    }\r\n\r\n    public static String get_target_folder_rel_path(Project project,\r\n                                                    VirtualFile root_file,\r\n                                                    Settings settings,\r\n                                                    String class_name,\r\n                                                    String class_scope) throws Exception {\r\n\r\n        String target_folder_abs_path = get_target_folder_abs_path(project, root_file, settings, class_scope);\r\n        String target_file_abs_path = TargetLangUtils.get_target_file_path(root_file.getName(), target_folder_abs_path, class_name);\r\n        String rel_path = IdeaHelpers.get_relative_path(project, target_file_abs_path);\r\n        return rel_path;\r\n    }\r\n\r\n    public static void open_dto_sync(Project project,\r\n                                     VirtualFile root_file,\r\n                                     Settings settings,\r\n                                     String dto_class_name) throws Exception {\r\n\r\n        String target_file_abs_path = get_dto_file_abs_path(project, root_file, settings, dto_class_name);\r\n        String rel_path = IdeaHelpers.get_relative_path(project, target_file_abs_path);\r\n        IdeaEditorHelpers.open_project_file_in_editor_sync(project, rel_path);\r\n    }\r\n\r\n    public static void open_dao_sync(Project project,\r\n                                     VirtualFile root_file,\r\n                                     Settings settings,\r\n                                     String dao_class_name) throws Exception {\r\n\r\n        String target_file_abs_path = get_dao_file_abs_path(project, root_file, settings, dao_class_name);\r\n        String rel_path = IdeaHelpers.get_relative_path(project, target_file_abs_path);\r\n        IdeaEditorHelpers.open_project_file_in_editor_sync(project, rel_path);\r\n    }\r\n\r\n//    public static void open_editor_sync(Project project,\r\n//                                        VirtualFile root_file,\r\n//                                        Settings settings,\r\n//                                        String class_name,\r\n//                                        String class_scope) throws Exception {\r\n//\r\n//        String rel_path = get_target_folder_rel_path(project, root_file, settings, class_name, class_scope);\r\n//        IdeaEditorHelpers.open_project_file_in_editor_sync(project, rel_path);\r\n//    }\r\n\r\n    public static void prepare_generated_file_data(VirtualFile root_file,\r\n                                                   String class_name,\r\n                                                   String[] file_content,\r\n                                                   List<IdeaHelpers.GeneratedFileData> list) throws Exception {\r\n\r\n        String file_name = TargetLangUtils.file_name_from_class_name(root_file.getName(), class_name);\r\n        IdeaHelpers.GeneratedFileData gf = new IdeaHelpers.GeneratedFileData();\r\n        gf.file_name = file_name;\r\n        gf.file_content = file_content[0];\r\n        list.add(gf);\r\n    }\r\n\r\n    public static void validate_dto(Project project,\r\n                                    VirtualFile root_file,\r\n                                    Settings settings,\r\n                                    String dto_class_name,\r\n                                    String[] file_content,\r\n                                    StringBuilder validation_buff) throws Exception {\r\n\r\n        String target_file_abs_path = get_dto_file_abs_path(project, root_file, settings, dto_class_name);\r\n        String old_text = Helpers.load_text_from_file(target_file_abs_path);\r\n        if (old_text.length() == 0) {\r\n            validation_buff.append(Const.OUTPUT_FILE_IS_MISSING);\r\n        } else {\r\n            String text = file_content[0];\r\n            if (!old_text.equals(text)) {\r\n                validation_buff.append(Const.OUTPUT_FILE_IS_OUT_OF_DATE);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static String get_target_folder_abs_path(Project project,\r\n                                                    VirtualFile root_file,\r\n                                                    Settings settings,\r\n                                                    String class_scope) throws Exception {\r\n\r\n        String target_folder_rel_path = settings.getFolders().getTarget();\r\n        String module_root = IdeaHelpers.get_project_base_dir(project).getPath();\r\n        String root_file_fn = root_file.getName();\r\n        return TargetLangUtils.get_target_folder_abs_path(class_scope, root_file_fn, target_folder_rel_path, module_root);\r\n    }\r\n\r\n    private static String get_dto_file_abs_path(Project project,\r\n                                                VirtualFile root_file,\r\n                                                Settings settings,\r\n                                                String dto_class_name) throws Exception {\r\n\r\n        String root_file_fn = root_file.getName();\r\n        String target_folder_abs_path;\r\n        if (RootFileName.GO.equals(root_file_fn)) {\r\n            String dto_folder_rel_path = get_golang_dto_folder_rel_path(settings);\r\n            String module_root = IdeaHelpers.get_project_base_dir(project).getPath();\r\n            target_folder_abs_path = Helpers.concat_path(module_root, dto_folder_rel_path);\r\n        } else {\r\n            target_folder_abs_path = get_target_folder_abs_path(project, root_file, settings, settings.getDto().getScope());\r\n        }\r\n        String target_file_abs_path = TargetLangUtils.get_target_file_path(root_file_fn, target_folder_abs_path, dto_class_name);\r\n        return target_file_abs_path;\r\n    }\r\n\r\n    private static String get_dao_file_abs_path(Project project,\r\n                                                VirtualFile root_file,\r\n                                                Settings settings,\r\n                                                String dao_class_name) throws Exception {\r\n\r\n        String root_file_fn = root_file.getName();\r\n        String target_folder_abs_path;\r\n        if (RootFileName.GO.equals(root_file_fn)) {\r\n            String dao_folder_rel_path = get_golang_dao_folder_rel_path(settings);\r\n            String module_root = IdeaHelpers.get_project_base_dir(project).getPath();\r\n            target_folder_abs_path = Helpers.concat_path(module_root, dao_folder_rel_path);\r\n        } else {\r\n            target_folder_abs_path = get_target_folder_abs_path(project, root_file, settings, settings.getDao().getScope());\r\n        }\r\n        String target_file_abs_path = TargetLangUtils.get_target_file_path(root_file_fn, target_folder_abs_path, dao_class_name);\r\n        return target_file_abs_path;\r\n    }\r\n\r\n    public static void validate_dao(Project project,\r\n                                    VirtualFile root_file,\r\n                                    Settings settings,\r\n                                    String dao_class_name,\r\n                                    String[] file_content,\r\n                                    StringBuilder validation_buff) throws Exception {\r\n\r\n        String target_file_abs_path = get_dao_file_abs_path(project, root_file, settings, dao_class_name);\r\n        String old_text = Helpers.load_text_from_file(target_file_abs_path);\r\n        if (old_text.length() == 0) {\r\n            validation_buff.append(Const.OUTPUT_FILE_IS_MISSING);\r\n        } else {\r\n            String text = file_content[0];\r\n            if (!old_text.equals(text)) {\r\n                validation_buff.append(Const.OUTPUT_FILE_IS_OUT_OF_DATE);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * returns null if the file is not root-file\r\n     */\r\n    public static String get_root_file_relative_path(Project project,\r\n                                                     VirtualFile file) {\r\n        String fn = file.getName();\r\n        if (RootFileName.JAVA.equals(fn)\r\n                || RootFileName.CPP.equals(fn)\r\n                || RootFileName.PHP.equals(fn)\r\n                || RootFileName.PYTHON.equals(fn)\r\n                || RootFileName.RUBY.equals(fn)\r\n                || RootFileName.GO.equals(fn)) {\r\n            try {\r\n                return IdeaHelpers.get_relative_path(project, file);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static boolean accept(@NotNull VirtualFile file) {\r\n\r\n        return RootFileName.JAVA.equals(file.getName()) ||\r\n                RootFileName.CPP.equals(file.getName()) ||\r\n                // ProfileNames.OBJC.equals(file.getName()) ||\r\n                RootFileName.PHP.equals(file.getName()) ||\r\n                RootFileName.PYTHON.equals(file.getName()) ||\r\n                RootFileName.RUBY.equals(file.getName()) ||\r\n                RootFileName.GO.equals(file.getName());\r\n    }\r\n\r\n    private static String get_dto_vm_template(Settings settings,\r\n                                              String project_abs_path) throws Exception {\r\n\r\n        String macro_name = settings.getDto().getMacro();\r\n        return get_vm_template(macro_name, settings, project_abs_path);\r\n    }\r\n\r\n    private static String get_dao_vm_template(Settings settings,\r\n                                              String project_abs_path) throws Exception {\r\n\r\n        String macro_name = settings.getDao().getMacro();\r\n        return get_vm_template(macro_name, settings, project_abs_path);\r\n    }\r\n\r\n    private static String get_vm_template(String macro_name,\r\n                                          Settings settings,\r\n                                          String project_abs_path) throws Exception {\r\n        String vm_template;\r\n        // read the file or find the macro\r\n        if (macro_name == null || macro_name.trim().length() == 0) {\r\n            if (settings.getExternalVmFile().getPath().trim().length() == 0) {\r\n                return null;\r\n            } else {\r\n                String vm_file_system_path = Helpers.concat_path(project_abs_path, settings.getExternalVmFile().getPath());\r\n                // https://stackoverflow.com/questions/4716503/reading-a-plain-text-file-in-java\r\n                vm_template = new String(Files.readAllBytes(Paths.get(vm_file_system_path)));\r\n                return vm_template;\r\n            }\r\n        }\r\n        Macros.Macro vm_macro = null;\r\n        for (Macros.Macro m : settings.getMacros().getMacro()) {\r\n            if (m.getName().equalsIgnoreCase(macro_name)) {\r\n                vm_macro = m;\r\n                break;\r\n            }\r\n        }\r\n        if (vm_macro == null) {\r\n            throw new Exception(\"Macro not found: \" + macro_name);\r\n        }\r\n        if (vm_macro.getVm() != null) {\r\n            vm_template = vm_macro.getVm().trim();\r\n        } else if (vm_macro.getVmXml() != null) {\r\n            vm_template = Xml2Vm.parse(vm_macro.getVmXml());\r\n        } else {\r\n            throw new Exception(\"Expected <vm> or <vm-xml> in \" + macro_name);\r\n        }\r\n        return vm_template;\r\n    }\r\n\r\n    public static IDtoCG create_dto_cg(Connection connection,\r\n                                       Project project, VirtualFile root_file,\r\n                                       Settings settings,\r\n                                       StringBuilder output_dir_rel_path) throws Exception {\r\n\r\n        String project_abs_path = IdeaHelpers.get_project_base_dir(project).getPath();\r\n        String sql_root_abs_path = Helpers.concat_path(project_abs_path, settings.getFolders().getSql());\r\n        String vm_template = get_dto_vm_template(settings, project_abs_path);\r\n        String xml_configs_folder_full_path = root_file.getParent().getPath();\r\n        String dto_xml_abs_path = xml_configs_folder_full_path + \"/\" + Const.DTO_XML;\r\n        String dto_xsd_abs_path = xml_configs_folder_full_path + \"/\" + Const.DTO_XSD;\r\n        String context_path = DtoClasses.class.getPackage().getName();\r\n        XmlParser xml_parser = new XmlParser(context_path, dto_xsd_abs_path);\r\n        DtoClasses dto_classes = xml_parser.unmarshal(dto_xml_abs_path);\r\n        String fn = root_file.getName();\r\n        ////////////////////////////////////////////////////\r\n        if (RootFileName.PHP.equals(fn)) {\r\n            if (output_dir_rel_path != null) {\r\n                String dto_package = settings.getDto().getScope();\r\n                String package_rel_path = SdmUtils.get_package_relative_path(settings, dto_package);\r\n                output_dir_rel_path.append(package_rel_path);\r\n            }\r\n            FieldNamesMode field_names_mode = Helpers.get_field_names_mode(settings);\r\n            return new PhpCG.DTO(dto_classes, settings, connection, sql_root_abs_path, vm_template, field_names_mode);\r\n        } else if (RootFileName.JAVA.equals(fn)) {\r\n            FieldNamesMode field_names_mode = Helpers.get_field_names_mode(settings);\r\n            String dto_inheritance = settings.getDto().getInheritance();\r\n            String dto_package = settings.getDto().getScope();\r\n            if (output_dir_rel_path != null) {\r\n                String package_rel_path = SdmUtils.get_package_relative_path(settings, dto_package);\r\n                output_dir_rel_path.append(package_rel_path);\r\n            }\r\n            return new JavaCG.DTO(dto_classes, settings, connection, dto_package,\r\n                    sql_root_abs_path, dto_inheritance, field_names_mode, vm_template);\r\n        } else if (RootFileName.CPP.equals(fn)) {\r\n            if (output_dir_rel_path != null) {\r\n                String package_rel_path = settings.getFolders().getTarget();\r\n                output_dir_rel_path.append(package_rel_path);\r\n            }\r\n            Settings sett = IdeaHelpers.load_settings(root_file);\r\n            return new CppCG.DTO(dto_classes, sett, connection, sql_root_abs_path, settings.getCpp().getClassPrefix(), vm_template);\r\n        } else if (RootFileName.PYTHON.equals(fn)) {\r\n            if (output_dir_rel_path != null) {\r\n                String package_rel_path = settings.getFolders().getTarget();\r\n                output_dir_rel_path.append(package_rel_path);\r\n            }\r\n            return new PythonCG.DTO(dto_classes, settings, connection, sql_root_abs_path, vm_template);\r\n        } else if (RootFileName.RUBY.equals(fn)) {\r\n            if (output_dir_rel_path != null) {\r\n                String package_rel_path = settings.getFolders().getTarget();\r\n                output_dir_rel_path.append(package_rel_path);\r\n            }\r\n            return new RubyCG.DTO(dto_classes, settings, connection, sql_root_abs_path, vm_template);\r\n        } else if (RootFileName.GO.equals(fn)) {\r\n            if (output_dir_rel_path != null) {\r\n                String package_rel_path = get_golang_dto_folder_rel_path(settings);\r\n                output_dir_rel_path.append(package_rel_path);\r\n            }\r\n            FieldNamesMode field_names_mode = Helpers.get_field_names_mode(settings);\r\n            return new GoCG.DTO(dto_classes, settings, connection, sql_root_abs_path, field_names_mode, vm_template);\r\n        } else {\r\n            throw new Exception(TargetLangUtils.get_unknown_root_file_msg(fn));\r\n        }\r\n    }\r\n\r\n    private static String get_golang_dto_folder_rel_path(Settings settings) throws Exception {\r\n        String dto_scope = settings.getDto().getScope().replace(\"\\\\\", \"/\");\r\n        String package_rel_path;\r\n        String target_folder = settings.getFolders().getTarget();\r\n        if (dto_scope.length() == 0) {\r\n            String dao_scope = settings.getDao().getScope().replace(\"\\\\\", \"/\");\r\n            if (dao_scope.length() != 0) {\r\n                throw new Exception(\"If DTO scope is empty, DAO scope must be empty too.\");\r\n            }\r\n            package_rel_path = target_folder;\r\n        } else {\r\n            Path p = Paths.get(dto_scope);\r\n            String dto_scope_last_segment = p.getFileName().toString();\r\n            if (dto_scope_last_segment.equals(dto_scope)) { // just package name\r\n                String dao_scope = settings.getDao().getScope().replace(\"\\\\\", \"/\");\r\n                if (dao_scope.equals(dto_scope)) {\r\n                    package_rel_path = target_folder;\r\n                } else {\r\n                    throw new Exception(\"The scopes of DTO and DAO are different, \" +\r\n                            \"so the scope of DTO must be specified in the format of Golang 'import'\");\r\n                }\r\n            } else {\r\n                String[] dto_scope_parts = dto_scope.split(\"/\");\r\n                String path_after_root_module = dto_scope.substring(dto_scope_parts[0].length() + 1);\r\n                package_rel_path = path_after_root_module; // just ignore target folder\r\n            }\r\n        }\r\n        return package_rel_path;\r\n    }\r\n\r\n    private static String get_golang_dao_folder_rel_path(Settings settings) throws Exception {\r\n        String dao_scope = settings.getDao().getScope().replace(\"\\\\\", \"/\");\r\n        String package_rel_path;\r\n        String target_folder = settings.getFolders().getTarget();\r\n        if (dao_scope.length() == 0) {\r\n            String dto_scope = settings.getDto().getScope().replace(\"\\\\\", \"/\");\r\n            if (dto_scope.length() != 0) {\r\n                throw new Exception(\"If DAO scope is empty, DTO scope must be empty too.\");\r\n            }\r\n            package_rel_path = target_folder;\r\n        } else {\r\n            Path p = Paths.get(dao_scope);\r\n            String dao_scope_last_segment = p.getFileName().toString();\r\n            if (dao_scope_last_segment.equals(dao_scope)) { // just package name\r\n                String dto_scope = settings.getDto().getScope().replace(\"\\\\\", \"/\");\r\n                if (dao_scope.equals(dto_scope)) {\r\n                    package_rel_path = target_folder;\r\n                } else {\r\n                    throw new Exception(\"The scopes of DTO and DAO are different, \" +\r\n                            \"so the scope of DAO must be specified in the format of Golang 'import'\");\r\n                }\r\n            } else {\r\n                String[] dao_scope_parts = dao_scope.split(\"/\");\r\n                String path_after_root_module = dao_scope.substring(dao_scope_parts[0].length() + 1);\r\n                package_rel_path = path_after_root_module; // just ignore target folder\r\n            }\r\n        }\r\n        return package_rel_path;\r\n    }\r\n\r\n    public static IDaoCG create_dao_cg(Connection con,\r\n                                       Project project,\r\n                                       VirtualFile root_file,\r\n                                       Settings settings,\r\n                                       StringBuilder output_dir_rel_path) throws Exception {\r\n\r\n        String project_abs_path = IdeaHelpers.get_project_base_dir(project).getPath();\r\n        String sql_root_abs_path = Helpers.concat_path(project_abs_path, settings.getFolders().getSql());\r\n        String xml_configs_folder_full_path = root_file.getParent().getPath();\r\n        String dto_xml_abs_path = xml_configs_folder_full_path + \"/\" + Const.DTO_XML;\r\n        String dto_xsd_abs_path = xml_configs_folder_full_path + \"/\" + Const.DTO_XSD;\r\n        String vm_template = get_dao_vm_template(settings, project_abs_path);\r\n        String context_path = DtoClasses.class.getPackage().getName();\r\n        XmlParser xml_parser = new XmlParser(context_path, dto_xsd_abs_path);\r\n        DtoClasses dto_classes = xml_parser.unmarshal(dto_xml_abs_path);\r\n        String fn = root_file.getName();\r\n        ////////////////////////////////////////////////////\r\n        if (RootFileName.PHP.equals(fn)) {\r\n            if (output_dir_rel_path != null) {\r\n                String dao_package = settings.getDao().getScope();\r\n                String package_rel_path = SdmUtils.get_package_relative_path(settings, dao_package);\r\n                output_dir_rel_path.append(package_rel_path);\r\n            }\r\n            FieldNamesMode field_names_mode = Helpers.get_field_names_mode(settings);\r\n            return new PhpCG.DAO(dto_classes, settings, con, sql_root_abs_path, vm_template, field_names_mode);\r\n        } else if (RootFileName.JAVA.equals(fn)) {\r\n            FieldNamesMode field_names_mode = Helpers.get_field_names_mode(settings);\r\n            String dto_package = settings.getDto().getScope();\r\n            String dao_package = settings.getDao().getScope();\r\n            if (output_dir_rel_path != null) {\r\n                String package_rel_path = SdmUtils.get_package_relative_path(settings, dao_package);\r\n                output_dir_rel_path.append(package_rel_path);\r\n            }\r\n            return new JavaCG.DAO(dto_classes, settings, con, dto_package, dao_package,\r\n                    sql_root_abs_path, field_names_mode, vm_template);\r\n        } else if (RootFileName.CPP.equals(fn)) {\r\n            if (output_dir_rel_path != null) {\r\n                String package_rel_path = settings.getFolders().getTarget();\r\n                output_dir_rel_path.append(package_rel_path);\r\n            }\r\n            String class_prefix = settings.getCpp().getClassPrefix();\r\n            return new CppCG.DAO(dto_classes, settings, con, sql_root_abs_path, class_prefix, vm_template);\r\n        } else if (RootFileName.PYTHON.equals(fn)) {\r\n            String package_rel_path = settings.getFolders().getTarget();\r\n            if (output_dir_rel_path != null) {\r\n                output_dir_rel_path.append(package_rel_path);\r\n            }\r\n            String dto_package = package_rel_path.replace(\"/\", \".\").replace(\"\\\\\", \".\");\r\n            return new PythonCG.DAO(dto_package, dto_classes, settings, con, sql_root_abs_path, vm_template);\r\n        } else if (RootFileName.RUBY.equals(fn)) {\r\n            if (output_dir_rel_path != null) {\r\n                String package_rel_path = settings.getFolders().getTarget();\r\n                output_dir_rel_path.append(package_rel_path);\r\n            }\r\n            return new RubyCG.DAO(dto_classes, settings, con, sql_root_abs_path, vm_template);\r\n        } else if (RootFileName.GO.equals(fn)) {\r\n            if (output_dir_rel_path != null) {\r\n                String dto_scope = settings.getDto().getScope().replace(\"\\\\\", \"/\");\r\n                String dao_scope = settings.getDao().getScope().replace(\"\\\\\", \"/\");\r\n                String package_rel_path;\r\n                String target_folder = settings.getFolders().getTarget();\r\n                if (dao_scope.length() == 0) {\r\n                    if (dto_scope.length() != 0) {\r\n                        throw new Exception(\"If the scope of DAO is empty, the scope of DTO must be empty too.\");\r\n                    }\r\n                    package_rel_path = target_folder;\r\n                } else {\r\n                    Path p = Paths.get(dto_scope);\r\n                    String dao_scope_last_segment = p.getFileName().toString();\r\n                    if (dao_scope_last_segment.equals(dto_scope)) { // just package name\r\n                        if (dao_scope.equals(dto_scope)) {\r\n                            package_rel_path = target_folder;\r\n                        } else {\r\n                            throw new Exception(\"The scopes of DTO and DAO are different, \" +\r\n                                    \"so the scope of DAO must be specified in the format of Golang 'import'\");\r\n                        }\r\n                    } else {\r\n                        String[] dao_scope_parts = dao_scope.split(\"/\");\r\n                        String path_after_root_module = dao_scope.substring(dao_scope_parts[0].length() + 1);\r\n                        package_rel_path = path_after_root_module; // just ignore target folder\r\n                    }\r\n                }\r\n                output_dir_rel_path.append(package_rel_path);\r\n            }\r\n            FieldNamesMode field_names_mode = Helpers.get_field_names_mode(settings);\r\n            return new GoCG.DAO(dto_classes, settings, con, sql_root_abs_path, field_names_mode, vm_template);\r\n        } else {\r\n            throw new Exception(TargetLangUtils.get_unknown_root_file_msg(fn));\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src_intellij/com/sqldalmaker/intellij/ui/IdeaTargetLanguageHelpers.java b/src_intellij/com/sqldalmaker/intellij/ui/IdeaTargetLanguageHelpers.java
--- a/src_intellij/com/sqldalmaker/intellij/ui/IdeaTargetLanguageHelpers.java	(revision aa3a6f4305b726788dec03bf4f8b00550481571b)
+++ b/src_intellij/com/sqldalmaker/intellij/ui/IdeaTargetLanguageHelpers.java	(date 1657971681897)
@@ -376,7 +376,7 @@
                     package_rel_path = target_folder;
                 } else {
                     throw new Exception("The scopes of DTO and DAO are different, " +
-                            "so the scope of DTO must be specified in the format of Golang 'import'");
+                            "so they both must be specified in the format of Golang 'import'");
                 }
             } else {
                 String[] dto_scope_parts = dto_scope.split("/");
@@ -406,7 +406,7 @@
                     package_rel_path = target_folder;
                 } else {
                     throw new Exception("The scopes of DTO and DAO are different, " +
-                            "so the scope of DAO must be specified in the format of Golang 'import'");
+                            "so they both must be specified in the format of Golang 'import'");
                 }
             } else {
                 String[] dao_scope_parts = dao_scope.split("/");
Index: src/recent_changes.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>2022-07-09\r\n\r\n    + dto macro\r\n    + dao macro\r\n\r\n2022-05-28\r\n\r\n    fixes regarding PHP namespaces.\r\n\r\n2022-05-21\r\n\r\n    + DataStore_Doctrine_ORM.php\r\n\r\n    https://github.com/panedrone/sdm_demo_todolist_php_doctrine\r\n\r\n2022-05-12\r\n\r\n    + GORM\r\n\r\n2022-05-03\r\n\r\n    + XML wrappers for VM templates (update XSD files and see the reference \"settings.xml\")\r\n\r\n2022-04-30\r\n\r\n    + django.db models\r\n\r\n    See -->\r\n\r\n    https://github.com/panedrone/sqldalmaker/blob/master/src/resources/settings.xml\r\n    https://github.com/panedrone/sqldalmaker/blob/master/src/resources/data_store.py\r\n\r\n2022-04-29\r\n\r\n    VM templates for global macros.\r\n\r\n2022-04-25\r\n\r\n    Rework to allow using \"<query-dto-list...\" and \"<query-dto...\" with empty \"ref\":\r\n\r\n    <query-dto-list method=\"get_orders(dt1, dt2) dto=\"sa-OrderEx\" ref=\"\"/>\r\n\r\n    In such cases, \"ref\" from \"\"<dto-class...\" is used:\r\n\r\n     <dto-class name=\"sa-OrderEx\" ref=\"get_orders.sql\"/>\r\n\r\n2022-04-23\r\n\r\n    + (Flask-)SQLAlchemy \"ForeignKey\", \"index\", \"unique\"\r\n\r\n2022-04-22\r\n\r\n    Improvements fo Python\r\n\r\n2022-04-21\r\n\r\n    Fix related to incorrect AI detection in sqlite-jdbc-3.19.3.jar\r\n\r\n2022-04-20\r\n\r\n    - Fixes for SQLAlchemy + Oracle.\r\n\r\n        Re-define identity keys as Integer-s because of auto-detected Float-s are not working:\r\n\r\n        <dto-class name=\"sa-Group\" ref=\"GROUPS\">\r\n            <field type=\"|0:Integer\" column=\"G_ID\"/>\r\n        </dto-class>\r\n\r\n        ^^ also, specify table names in upper-case to detect primary keys correctly.\r\n\r\n        https://docs.sqlalchemy.org/en/14/dialects/oracle.html\r\n\r\n    - Fixes of imports.\r\n\r\n2022-04-17\r\n\r\n    # SQLAlchemy models (update XSD files from the tab 'Admin'):\r\n\r\n    ds = DataStore()\r\n    ds.open()\r\n\r\n    # orm-way ---------------------------------------------\r\n    # <dto-class name=\"sqlalchemy-TaskModel\" ref=\"tasks\"/>\r\n\r\n    tasks = self.ds.session.query(TaskModel).filter(TaskModel.g_id == g_id).all()\r\n    for tt in tasks:\r\n        t: TaskModel = tt\r\n        print(f\"{t.t_date}\\t{t.t_subject}\\n\")\r\n\r\n    task = self.ds.session.query(TaskModel).get(t_id)\r\n    task.t_subject = t_subject\r\n    ds.commit()\r\n\r\n    # raw sql --------------------------------------------\r\n    # <dto-class name=\"ActorInfo\" ref=\"actor_info.sql\"/>\r\n\r\n    aa = ds.fetch_all_raw(ActorInfo, [50]) # 50 is film_id\r\n    for a in aa:\r\n        print(\"\\n\", a)\r\n\r\n2022-04-06\r\n\r\n    Navigation from XML to generated files\r\n\r\n2022-04-01\r\n\r\n    Reworked error handling for Golang\r\n\r\n2022-03-30\r\n\r\n    Allowed not-PK/FK columns in SQL-shortcuts\r\n\r\n2022-03-12\r\n\r\n    UI adapted for NetBeans 13\r\n\r\n2021-10-01\r\n\r\n    [FIX] data_store.go --> _isPtrToNil\r\n\r\n2021-09-23\r\n\r\n    SQLAlchemy Raw SQL --> data_store_sqlalchemy.py\r\n\r\n2021-09-20\r\n\r\n    Single data_store.py for sqlite3, mysql.connector, postgresql_psycopg2, and django\r\n\r\n2021-09-13\r\n\r\n    Disabled IntelliJ warnings about deprecated API usage\r\n\r\n2021-08-07\r\n\r\n    Disabled Warning -> Do not request resource from classloader using path with leading slash\r\n\r\n2021-06-10\r\n\r\n    - Go -> return error instead of panic\r\n    - Go -> fix of SQL formatting\r\n\r\n2021-05-17\r\n\r\n    - IntelliJ -> prevented asking for child nodes when SDM toolbar drop-down is hidden.\r\n    - Kebab-case for field-comment\r\n        <dto-class name=\"Task\" ref=\"tasks\" field-comment=\"`xml:&quot;{kebab-case(column)}&quot;`\"/>\r\n\r\n2021-05-10\r\n\r\n    New xml attribute \"field-comment\" to simplify type-comments for Go:\r\n\r\n    <dto-class name=\"Group\" ref=\"get_groups.sql\" field-comment=\"`json:&quot;{snake_case(column)}&quot;`\">\r\n        <field type=\"int64\" column=\"g_id\"/>\r\n        <field type=\"string\" column=\"g_name\"/>\r\n        <field type=\"int64\" column=\"tasks_count\"/>\r\n    </dto-class>\r\n\r\n    <dto-class name=\"Task\" ref=\"tasks\" field-comment=\"`json:&quot;{snake_case(column)}&quot;`\"/>\r\n\r\n    ----- overwride XSD files from plugin GUI -> tab 'Admin'\r\n\r\n2021-05-01\r\n\r\n    Type-comments for Go\r\n\r\n    <dto-class name=\"Group\" ref=\"get_groups.sql\">\r\n        <field type='int64 `json:\"g_id\"`' column=\"g_id\"/>\r\n        <field type='string `json:\"g_name\"`' column=\"g_name\"/>\r\n        <field type='int64 `json:\"tasks_count\"`' column=\"tasks_count\"/>\r\n    </dto-class>\r\n\r\n2021-04-01\r\n\r\n    - Fixes for JRE 15+\r\n    - Go + Oracle -> SP + implicit RC (multiple implicit RC in one SP are not supported yet)\r\n\r\n2021-03-29\r\n\r\n    Go + PostgreSQL -> OUT and INOUT parameters\r\n\r\n2021-03-23\r\n\r\n    Go + Oracle -> UDF returning SYS_REFCURSOR\r\n    Go + Oracle -> SYS_REFCURSOR-s as OUT parameters\r\n    (Not working yet: Go + Oracle -> Implicit SYS_REFCURSOR-s)\r\n\r\n2021-03-22\r\n\r\n    Go -> SP OUT/INOUT parameters -> Oracle\r\n    Go -> TitleCase (0) or camelCase (1) for method names -> 'settings.xml' -> <dto field-names-mode\r\n    Go -> Oracle INSERT ... INTO... -> implemented fetching of generated value.\r\n    Go -> SP OUT/INOUT parameters -> MS SQL Sever\r\n    Go -> Multiple Result-Sets\r\n    Go -> Transactions\r\n\r\n2021-03-15\r\n\r\n    Implemented 'type-map' for PHP, Python, Ruby.\r\n\r\n2021-03-08\r\n\r\n    Solved problem 'Go + DB NULL'.\r\n\r\n2021-03-06\r\n\r\n    Reworked for standard Python file names.\r\n\r\n2021-03-03\r\n\r\n    Initial implementation for Go. Tested on SQLite3, Oracle, and SQL Server.\r\n    Update XSD files and check existing XML to conform updates.\r\n\r\n2021-01-23\r\n\r\n    - 'Validate All' on the tab 'Admin'\r\n\r\n2020-12-25\r\n\r\n    - Fixes for SP returning Result-Set(s) implicitly\r\n\r\n2020-12-22\r\n\r\n    - Fixes for C++\r\n\r\n2020-12-10\r\n\r\n    - Renamed in PHP: queryDto -> queryRow, queryDtoList --> queryRowList\r\n\r\n2020-12-10\r\n\r\n    - Fixes of CRUD-create (PHP, Java, Python)\r\n\r\n2020-12-02\r\n\r\n    - DataStoreManagerAndroid.java adapted for new DataStore.java\r\n\r\n2020-12-01\r\n\r\n    - Further improvements for Java\r\n\t\r\n2020-11-17\r\n\r\n    - Simplified DataStore.java and DataStoreManagerJDBC.java\r\n    - Generated Java code adapted for new DataStore.java\r\n\r\n2020-09-28\r\n\r\n    - Added DataStoreManagerJDBC.java\r\n\r\n2020-09-21\r\n\r\n    - Bugfix of Eclipse IDE tool-bar button\r\n\r\n2020-09-14\r\n\r\n    - DataStoreManager.java adapted for JSF\r\n\r\n2020-09-10\r\n\r\n    - separate processing of multiple record-sets returned by MySQL SP\r\n\r\n2020-09-07\r\n\r\n    - separate processing of multiple ref-cursors returned by Oracle SP\r\n\r\n2020-09-06\r\n\r\n    - improved RefCursors logic for python + cx_oracle\r\n    - improved RefCursors logic for php + oci8\r\n\r\n2020-08-09\r\n\r\n    - improved RefCursors logic for python + cx_oracle\r\n    - improved RefCursors logic for php + oci8\r\n    - implemented fetching of last insert id for php + oci8\r\n    - added comments to describe how the mappings were built\r\n    - fixed php -> crud -> read\r\n\r\n2020-08-06\r\n\r\n    - Fix of 'ref' links in IntelliJ\r\n    - Fix of 'Test Connection' in IntelliJ\r\n\r\n2020-08-04\r\n\r\n    Added DataStore_oci8.php\r\n\r\n2020-08-02\r\n\r\n    Added DataStore_cx_Oracle.py\r\n\r\n2020-07-06\r\n\r\n    Added DataStore_pyodbc_Oracle.py\r\n\r\n2020-07-02\r\n\r\n    New actions 'Generate' and 'Validate' in IDE tool-bar button\r\n    \r\n2020-06-28\r\n\r\n    - Added DataStore_PDO_SQL_Server.php\r\n    - Added DataStore_PDO_Oracle.php\r\n\r\n2020-06-27\r\n\r\n    - Updated DataStore.java + Apache DbUtils for basic support of PostgreSQL UDF that RETURNS SETOF REFCURSOR.\r\n    - Fix in DataStore_psycopg2.py => exec_dml(...)\r\n    - Fix in DataStore_PDO_PostgreSQL.php => execDml(...)\r\n\r\n2020-06-25\r\n\r\n    Updated DataStore.php for MySQL to support OUT and INOUT parameters.\r\n\r\n2020-06-23\r\n\r\n    Updated DataStore.py for psycopg2 to support OUT parameters.\r\n\t\r\n2020-06-23\r\n\r\n    Updated DataStore.py for MySQL to support OUT parameters.\r\n\r\n2020-06-22\r\n\r\n    - DataStore.java and DataStoreManager.java for Apache DbUtils adapted to Oracle SYS_REFCURSOR.\r\n    - DataStoreManager.java for Apache DbUtils adapted to use OUT and INOUT parameters of SP.\r\n\r\n2020-06-21\r\n\r\n    Added PHP/PDO DataStore adapted to use with PostgreSQL.\r\n\r\n2020-06-19\r\n\r\n    Added DataStore based on psycopg2.\r\n\r\n2020-06-16\r\n\r\n    Enabled OUT params of SP in pyodbc + SQL Server.\r\n\r\n2020-06-04\r\n\r\n    Fixes of Python + MySQL example.\r\n    Fixes of jdbc_sql_to_php_str.\r\n\r\n2020-05-30\r\n\r\n    Fixes for MS SQL Server.\r\n\r\n2020-05-19\r\n\r\n    Improvements of type-detection for SQL-shortcuts.\r\n\r\n2020-05-05\r\n\r\n    New approach to map/correlate DTO <==> fetched records.\r\n\r\n2020-04-12\r\n\r\n    Package of DTO classes is taken into account in Python imports.\r\n\r\n2020-02-11\r\n\r\n   Added attribute 'pk' to define primary key manually in 'crud' and 'crud-auto': \r\n\t\r\n       <crud-auto dto=\"Ip2country\" table=\"ip2country\" pk=\"code\" />\r\n\t\t\r\n   Update XSD files.\r\n\t\r\n2020-01-11\r\n\r\n    Fixes of <query... return-type=\"...\".\r\n\t\r\n2020-01-07\r\n\r\n    DTO fields may be declared in XML even they are missing in metadata. You calculate the values of such fields outside of RDBMS.\r\n\r\n2019-12-31\r\n\t\r\n    Enabled <crud(-auto) table=\"my_schema.orders\"...\r\n\r\n2019-09-30\r\n\r\n    Starting from plug-in v.1.90, you can generate and run PHP, Java, and Python code to call stored procedures and functions.\r\n    Review updated implementations of DataStore: 1) PHP + PDO, 2) Java + Apache DbUtils, 3) Python + MySQL Connector/Python.\r\n    Tested with MySQL, Oracle DB, and PostgreSQL. Visit project Website for details.\r\n\r\n2019-08-17\r\n\r\n    Fixes of DTO navigation in Eclipse.\r\n\r\n2019-08-14\r\n\r\n    Adapted for xerial PK column names like '[employeeid] asc'.\r\n\r\n2019-08-13\r\n\r\n    Fixed incorrect commenting in Python and Ruby target code.\r\n\r\n2019-08-07\r\n\r\n    Fixed incorrect enumeration of root-files.\r\n\r\n2019-08-04\r\n\r\n    Adapted for new naming of SQL columns in SQLite3 JDBC driver\r\n\r\n    [INFO]\r\n    \r\n        Column labels are possible like 'CustomerID:1'.\r\n        To enable this, open 'dto.xsd' of your XML meta-program\r\n        and replace this\r\n        \r\n           <xs:attribute name=\"column\" use=\"required\" type=\"xs:NCName\" />\r\n           \r\n        with this\r\n        \r\n           <xs:attribute name=\"column\" use=\"required\" type=\"xs:string\" /> \r\n      \r\n2019-08-02\r\n\r\n    Fixed incorrect detection of PK for CRUD + SQLite3    \r\n\t\r\n2019-01-11\r\n\r\n    Fixes for DTO/DAO XML assistants + MySQL.\r\n\r\n2018-11-11\r\n\r\n    Fixes for DTO/DAO XML assistants + MySQL.\r\n\r\n2018-11-07\r\n\r\n    - Added an option to exclude views in DTO/DAO assistants.\r\n    - Fixes of C++ formatting in VM.\r\n    - Added example of DataStore class implemented in Qt5 C++.\r\n\r\n2018-02-12\r\n\r\n    Implemented generation of XML for reading data through FK-s.\r\n\t\r\n2018-01-08\r\n\r\n    Improvements of error handling and visualization.\r\n    \r\n    To use new event logging, update XSD-files from the tab 'Admin' and add <ide event-log=\"true\"/> to 'settings.xml'.\r\n\r\n2017-04-01\r\n\r\n    Shortcuts for simple reading data through FK-s:\r\n\r\n        '<query-dto-list method=\"findCustomers(companyName, region)\" dto=\"Customer\" ref=\"customers(CompanyName, Region)\"/>'
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/recent_changes.txt b/src/recent_changes.txt
--- a/src/recent_changes.txt	(revision aa3a6f4305b726788dec03bf4f8b00550481571b)
+++ b/src/recent_changes.txt	(date 1657971745864)
@@ -1,3 +1,7 @@
+2022-07-16
+
+    Enabled separate modules for DTO and DAO.
+
 2022-07-09
 
     + dto macro
